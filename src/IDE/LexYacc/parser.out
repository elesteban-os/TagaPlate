Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> COMMENT outsideInstruction PPROC instructionBlock SEMMICOLOM outsideInstruction
Rule 2     outsideInstruction -> attribute SEMMICOLOM outsideInstruction
Rule 3     outsideInstruction -> function SEMMICOLOM outsideInstruction
Rule 4     outsideInstruction -> empty
Rule 5     instructionBlock -> LPAR insideInstruction RPAR
Rule 6     attribute -> NEW ID COMMA LPAR datatype COMMA value RPAR
Rule 7     attribute -> NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
Rule 8     attribute -> NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
Rule 9     attribute -> NEW ID COMMA LPAR datatype COMMA ID RPAR
Rule 10    function -> PROC ID instructionBlock
Rule 11    function -> innerFunction
Rule 12    insideInstruction -> attribute SEMMICOLOM insideInstruction
Rule 13    insideInstruction -> innerFunction SEMMICOLOM insideInstruction
Rule 14    insideInstruction -> empty
Rule 15    datatype -> NUMDT
Rule 16    datatype -> BOOLDT
Rule 17    value -> NUMVALUE
Rule 18    value -> BOOLVALUE
Rule 19    innerFunction -> languageFunction
Rule 20    innerFunction -> tagadaFunction
Rule 21    languageFunction -> alterFunction
Rule 22    languageFunction -> returnBoolFunction
Rule 23    languageFunction -> voidFunction
Rule 24    tagadaFunction -> MOVERIGHT
Rule 25    tagadaFunction -> MOVELEFT
Rule 26    tagadaFunction -> STOP
Rule 27    tagadaFunction -> hammerFunction
Rule 28    alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
Rule 29    alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
Rule 30    returnBoolFunction -> alterbFunction
Rule 31    returnBoolFunction -> istrueFunction
Rule 32    returnBoolFunction -> numericalConditionFunction
Rule 33    voidFunction -> callFunction
Rule 34    voidFunction -> valuesFunction
Rule 35    voidFunction -> iterativeFunction
Rule 36    voidFunction -> printFunction
Rule 37    hammerFunction -> HAMMER LPAR direction RPAR
Rule 38    numericalOperator -> ADDOP
Rule 39    numericalOperator -> SUBOP
Rule 40    numericalOperator -> MULOP
Rule 41    numericalOperator -> DIVOP
Rule 42    alterbFunction -> ALTERB LPAR ID RPAR
Rule 43    istrueFunction -> ISTRUE LPAR BOOLVALUE RPAR
Rule 44    istrueFunction -> ISTRUE LPAR returnBoolFunction RPAR
Rule 45    istrueFunction -> ISTRUE LPAR ID RPAR
Rule 46    numericalConditionFunction -> NUMVALUE logicOperator NUMVALUE
Rule 47    numericalConditionFunction -> NUMVALUE logicOperator alterFunction
Rule 48    numericalConditionFunction -> NUMVALUE logicOperator ID
Rule 49    numericalConditionFunction -> alterFunction logicOperator NUMVALUE
Rule 50    numericalConditionFunction -> alterFunction logicOperator alterFunction
Rule 51    numericalConditionFunction -> alterFunction logicOperator ID
Rule 52    numericalConditionFunction -> ID logicOperator NUMVALUE
Rule 53    numericalConditionFunction -> ID logicOperator alterFunction
Rule 54    numericalConditionFunction -> ID logicOperator ID
Rule 55    callFunction -> CALL LPAR ID RPAR
Rule 56    valuesFunction -> VALUES LPAR ID COMMA value RPAR
Rule 57    valuesFunction -> VALUES LPAR ID COMMA alterFunction RPAR
Rule 58    valuesFunction -> VALUES LPAR ID COMMA returnBoolFunction RPAR
Rule 59    valuesFunction -> VALUES LPAR ID COMMA ID RPAR
Rule 60    iterativeFunction -> repeatFunction
Rule 61    iterativeFunction -> untilFunction
Rule 62    iterativeFunction -> whileFunction
Rule 63    iterativeFunction -> casewhenFunction
Rule 64    iterativeFunction -> caseFunction
Rule 65    printFunction -> PRINTVALUES LPAR ID consolePrint RPAR
Rule 66    printFunction -> PRINTVALUES LPAR TEXT consolePrint RPAR
Rule 67    direction -> NORTH
Rule 68    direction -> SOUTH
Rule 69    direction -> EAST
Rule 70    direction -> WEST
Rule 71    logicOperator -> EEOP
Rule 72    logicOperator -> NEOP
Rule 73    logicOperator -> GETOP
Rule 74    logicOperator -> LETOP
Rule 75    logicOperator -> GTOP
Rule 76    logicOperator -> LTOP
Rule 77    repeatFunction -> REPEAT LPAR insideInstruction BREAK SEMMICOLOM insideInstruction RPAR
Rule 78    untilFunction -> UNTIL instructionBlock BOOLVALUE
Rule 79    untilFunction -> UNTIL instructionBlock returnBoolFunction
Rule 80    untilFunction -> UNTIL instructionBlock ID
Rule 81    whileFunction -> WHILE BOOLVALUE instructionBlock
Rule 82    whileFunction -> WHILE returnBoolFunction instructionBlock
Rule 83    whileFunction -> WHILE ID instructionBlock
Rule 84    casewhenFunction -> CASEWHEN LPAR BOOLVALUE RPAR THEN instructionBlock elseExpression
Rule 85    casewhenFunction -> CASEWHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
Rule 86    casewhenFunction -> CASEWHEN LPAR ID RPAR THEN instructionBlock elseExpression
Rule 87    caseFunction -> CASE ID WHEN value THEN instructionBlock whenExpression elseExpression
Rule 88    consolePrint -> COMMA ID consolePrint
Rule 89    consolePrint -> COMMA TEXT consolePrint
Rule 90    consolePrint -> empty
Rule 91    elseExpression -> ELSE instructionBlock
Rule 92    elseExpression -> empty
Rule 93    whenExpression -> WHEN value THEN instructionBlock whenExpression
Rule 94    whenExpression -> empty
Rule 95    empty -> <empty>

Terminals, with rules where they appear

ADDOP                : 38
ALTER                : 28 29
ALTERB               : 42
BOOLDT               : 16
BOOLVALUE            : 18 43 78 81 84
BREAK                : 77
CALL                 : 55
CASE                 : 87
CASEWHEN             : 84 85 86
COMMA                : 6 6 7 7 8 8 9 9 28 28 29 29 56 57 58 59 88 89
COMMENT              : 1
DIVOP                : 41
EAST                 : 69
EEOP                 : 71
ELSE                 : 91
GETOP                : 73
GTOP                 : 75
HAMMER               : 37
ID                   : 6 7 8 9 9 10 28 29 29 42 45 48 51 52 53 54 54 55 56 57 58 59 59 65 80 83 86 87 88
ISTRUE               : 43 44 45
LETOP                : 74
LPAR                 : 5 6 7 8 9 28 29 37 42 43 44 45 55 56 57 58 59 65 66 77 84 85 86
LTOP                 : 76
MOVELEFT             : 25
MOVERIGHT            : 24
MULOP                : 40
NEOP                 : 72
NEW                  : 6 7 8 9
NORTH                : 67
NUMDT                : 15
NUMVALUE             : 17 28 46 46 47 48 49 52
PPROC                : 1
PRINTVALUES          : 65 66
PROC                 : 10
REPEAT               : 77
RPAR                 : 5 6 7 8 9 28 29 37 42 43 44 45 55 56 57 58 59 65 66 77 84 85 86
SEMMICOLOM           : 1 2 3 12 13 77
SOUTH                : 68
STOP                 : 26
SUBOP                : 39
TEXT                 : 66 89
THEN                 : 84 85 86 87 93
UNTIL                : 78 79 80
VALUES               : 56 57 58 59
WEST                 : 70
WHEN                 : 87 93
WHILE                : 81 82 83
error                : 

Nonterminals, with rules where they appear

alterFunction        : 7 21 47 49 50 50 51 53 57
alterbFunction       : 30
attribute            : 2 12
callFunction         : 33
caseFunction         : 64
casewhenFunction     : 63
consolePrint         : 65 66 88 89
datatype             : 6 7 8 9
direction            : 37
elseExpression       : 84 85 86 87
empty                : 4 14 90 92 94
function             : 3
hammerFunction       : 27
innerFunction        : 11 13
insideInstruction    : 5 12 13 77 77
instructionBlock     : 1 10 78 79 80 81 82 83 84 85 86 87 91 93
istrueFunction       : 31
iterativeFunction    : 35
languageFunction     : 19
logicOperator        : 46 47 48 49 50 51 52 53 54
numericalConditionFunction : 32
numericalOperator    : 28 29
outsideInstruction   : 1 1 2 3
printFunction        : 36
program              : 0
repeatFunction       : 60
returnBoolFunction   : 8 22 44 58 79 82 85
tagadaFunction       : 20
untilFunction        : 61
value                : 6 56 87 93
valuesFunction       : 34
voidFunction         : 23
whenExpression       : 87 93
whileFunction        : 62

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . COMMENT outsideInstruction PPROC instructionBlock SEMMICOLOM outsideInstruction

    COMMENT         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> COMMENT . outsideInstruction PPROC instructionBlock SEMMICOLOM outsideInstruction
    (2) outsideInstruction -> . attribute SEMMICOLOM outsideInstruction
    (3) outsideInstruction -> . function SEMMICOLOM outsideInstruction
    (4) outsideInstruction -> . empty
    (6) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (7) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (8) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (9) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (10) function -> . PROC ID instructionBlock
    (11) function -> . innerFunction
    (95) empty -> .
    (19) innerFunction -> . languageFunction
    (20) innerFunction -> . tagadaFunction
    (21) languageFunction -> . alterFunction
    (22) languageFunction -> . returnBoolFunction
    (23) languageFunction -> . voidFunction
    (24) tagadaFunction -> . MOVERIGHT
    (25) tagadaFunction -> . MOVELEFT
    (26) tagadaFunction -> . STOP
    (27) tagadaFunction -> . hammerFunction
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (30) returnBoolFunction -> . alterbFunction
    (31) returnBoolFunction -> . istrueFunction
    (32) returnBoolFunction -> . numericalConditionFunction
    (33) voidFunction -> . callFunction
    (34) voidFunction -> . valuesFunction
    (35) voidFunction -> . iterativeFunction
    (36) voidFunction -> . printFunction
    (37) hammerFunction -> . HAMMER LPAR direction RPAR
    (42) alterbFunction -> . ALTERB LPAR ID RPAR
    (43) istrueFunction -> . ISTRUE LPAR BOOLVALUE RPAR
    (44) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (45) istrueFunction -> . ISTRUE LPAR ID RPAR
    (46) numericalConditionFunction -> . NUMVALUE logicOperator NUMVALUE
    (47) numericalConditionFunction -> . NUMVALUE logicOperator alterFunction
    (48) numericalConditionFunction -> . NUMVALUE logicOperator ID
    (49) numericalConditionFunction -> . alterFunction logicOperator NUMVALUE
    (50) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (51) numericalConditionFunction -> . alterFunction logicOperator ID
    (52) numericalConditionFunction -> . ID logicOperator NUMVALUE
    (53) numericalConditionFunction -> . ID logicOperator alterFunction
    (54) numericalConditionFunction -> . ID logicOperator ID
    (55) callFunction -> . CALL LPAR ID RPAR
    (56) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (57) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (58) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (59) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (60) iterativeFunction -> . repeatFunction
    (61) iterativeFunction -> . untilFunction
    (62) iterativeFunction -> . whileFunction
    (63) iterativeFunction -> . casewhenFunction
    (64) iterativeFunction -> . caseFunction
    (65) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (66) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (77) repeatFunction -> . REPEAT LPAR insideInstruction BREAK SEMMICOLOM insideInstruction RPAR
    (78) untilFunction -> . UNTIL instructionBlock BOOLVALUE
    (79) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (80) untilFunction -> . UNTIL instructionBlock ID
    (81) whileFunction -> . WHILE BOOLVALUE instructionBlock
    (82) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (83) whileFunction -> . WHILE ID instructionBlock
    (84) casewhenFunction -> . CASEWHEN LPAR BOOLVALUE RPAR THEN instructionBlock elseExpression
    (85) casewhenFunction -> . CASEWHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (86) casewhenFunction -> . CASEWHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (87) caseFunction -> . CASE ID WHEN value THEN instructionBlock whenExpression elseExpression

    NEW             shift and go to state 7
    PROC            shift and go to state 11
    PPROC           reduce using rule 95 (empty -> .)
    MOVERIGHT       shift and go to state 16
    MOVELEFT        shift and go to state 17
    STOP            shift and go to state 18
    ALTER           shift and go to state 20
    HAMMER          shift and go to state 29
    ALTERB          shift and go to state 30
    ISTRUE          shift and go to state 31
    NUMVALUE        shift and go to state 21
    ID              shift and go to state 8
    CALL            shift and go to state 32
    VALUES          shift and go to state 33
    PRINTVALUES     shift and go to state 39
    REPEAT          shift and go to state 40
    UNTIL           shift and go to state 41
    WHILE           shift and go to state 42
    CASEWHEN        shift and go to state 43
    CASE            shift and go to state 44

    outsideInstruction             shift and go to state 3
    attribute                      shift and go to state 4
    function                       shift and go to state 5
    empty                          shift and go to state 6
    alterFunction                  shift and go to state 9
    returnBoolFunction             shift and go to state 10
    innerFunction                  shift and go to state 12
    languageFunction               shift and go to state 13
    tagadaFunction                 shift and go to state 14
    voidFunction                   shift and go to state 15
    hammerFunction                 shift and go to state 19
    alterbFunction                 shift and go to state 22
    istrueFunction                 shift and go to state 23
    numericalConditionFunction     shift and go to state 24
    callFunction                   shift and go to state 25
    valuesFunction                 shift and go to state 26
    iterativeFunction              shift and go to state 27
    printFunction                  shift and go to state 28
    repeatFunction                 shift and go to state 34
    untilFunction                  shift and go to state 35
    whileFunction                  shift and go to state 36
    casewhenFunction               shift and go to state 37
    caseFunction                   shift and go to state 38

state 3

    (1) program -> COMMENT outsideInstruction . PPROC instructionBlock SEMMICOLOM outsideInstruction

    PPROC           shift and go to state 45


state 4

    (2) outsideInstruction -> attribute . SEMMICOLOM outsideInstruction

    SEMMICOLOM      shift and go to state 46


state 5

    (3) outsideInstruction -> function . SEMMICOLOM outsideInstruction

    SEMMICOLOM      shift and go to state 47


state 6

    (4) outsideInstruction -> empty .

    PPROC           reduce using rule 4 (outsideInstruction -> empty .)
    $end            reduce using rule 4 (outsideInstruction -> empty .)


state 7

    (6) attribute -> NEW . ID COMMA LPAR datatype COMMA value RPAR
    (7) attribute -> NEW . ID COMMA LPAR datatype COMMA alterFunction RPAR
    (8) attribute -> NEW . ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (9) attribute -> NEW . ID COMMA LPAR datatype COMMA ID RPAR

    ID              shift and go to state 48


state 8

    (52) numericalConditionFunction -> ID . logicOperator NUMVALUE
    (53) numericalConditionFunction -> ID . logicOperator alterFunction
    (54) numericalConditionFunction -> ID . logicOperator ID
    (71) logicOperator -> . EEOP
    (72) logicOperator -> . NEOP
    (73) logicOperator -> . GETOP
    (74) logicOperator -> . LETOP
    (75) logicOperator -> . GTOP
    (76) logicOperator -> . LTOP

    EEOP            shift and go to state 50
    NEOP            shift and go to state 51
    GETOP           shift and go to state 52
    LETOP           shift and go to state 53
    GTOP            shift and go to state 54
    LTOP            shift and go to state 55

    logicOperator                  shift and go to state 49

state 9

    (21) languageFunction -> alterFunction .
    (49) numericalConditionFunction -> alterFunction . logicOperator NUMVALUE
    (50) numericalConditionFunction -> alterFunction . logicOperator alterFunction
    (51) numericalConditionFunction -> alterFunction . logicOperator ID
    (71) logicOperator -> . EEOP
    (72) logicOperator -> . NEOP
    (73) logicOperator -> . GETOP
    (74) logicOperator -> . LETOP
    (75) logicOperator -> . GTOP
    (76) logicOperator -> . LTOP

    SEMMICOLOM      reduce using rule 21 (languageFunction -> alterFunction .)
    EEOP            shift and go to state 50
    NEOP            shift and go to state 51
    GETOP           shift and go to state 52
    LETOP           shift and go to state 53
    GTOP            shift and go to state 54
    LTOP            shift and go to state 55

    logicOperator                  shift and go to state 56

state 10

    (22) languageFunction -> returnBoolFunction .

    SEMMICOLOM      reduce using rule 22 (languageFunction -> returnBoolFunction .)


state 11

    (10) function -> PROC . ID instructionBlock

    ID              shift and go to state 57


state 12

    (11) function -> innerFunction .

    SEMMICOLOM      reduce using rule 11 (function -> innerFunction .)


state 13

    (19) innerFunction -> languageFunction .

    SEMMICOLOM      reduce using rule 19 (innerFunction -> languageFunction .)


state 14

    (20) innerFunction -> tagadaFunction .

    SEMMICOLOM      reduce using rule 20 (innerFunction -> tagadaFunction .)


state 15

    (23) languageFunction -> voidFunction .

    SEMMICOLOM      reduce using rule 23 (languageFunction -> voidFunction .)


state 16

    (24) tagadaFunction -> MOVERIGHT .

    SEMMICOLOM      reduce using rule 24 (tagadaFunction -> MOVERIGHT .)


state 17

    (25) tagadaFunction -> MOVELEFT .

    SEMMICOLOM      reduce using rule 25 (tagadaFunction -> MOVELEFT .)


state 18

    (26) tagadaFunction -> STOP .

    SEMMICOLOM      reduce using rule 26 (tagadaFunction -> STOP .)


state 19

    (27) tagadaFunction -> hammerFunction .

    SEMMICOLOM      reduce using rule 27 (tagadaFunction -> hammerFunction .)


state 20

    (28) alterFunction -> ALTER . LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> ALTER . LPAR ID COMMA numericalOperator COMMA ID RPAR

    LPAR            shift and go to state 58


state 21

    (46) numericalConditionFunction -> NUMVALUE . logicOperator NUMVALUE
    (47) numericalConditionFunction -> NUMVALUE . logicOperator alterFunction
    (48) numericalConditionFunction -> NUMVALUE . logicOperator ID
    (71) logicOperator -> . EEOP
    (72) logicOperator -> . NEOP
    (73) logicOperator -> . GETOP
    (74) logicOperator -> . LETOP
    (75) logicOperator -> . GTOP
    (76) logicOperator -> . LTOP

    EEOP            shift and go to state 50
    NEOP            shift and go to state 51
    GETOP           shift and go to state 52
    LETOP           shift and go to state 53
    GTOP            shift and go to state 54
    LTOP            shift and go to state 55

    logicOperator                  shift and go to state 59

state 22

    (30) returnBoolFunction -> alterbFunction .

    SEMMICOLOM      reduce using rule 30 (returnBoolFunction -> alterbFunction .)
    LPAR            reduce using rule 30 (returnBoolFunction -> alterbFunction .)
    RPAR            reduce using rule 30 (returnBoolFunction -> alterbFunction .)


state 23

    (31) returnBoolFunction -> istrueFunction .

    SEMMICOLOM      reduce using rule 31 (returnBoolFunction -> istrueFunction .)
    LPAR            reduce using rule 31 (returnBoolFunction -> istrueFunction .)
    RPAR            reduce using rule 31 (returnBoolFunction -> istrueFunction .)


state 24

    (32) returnBoolFunction -> numericalConditionFunction .

    SEMMICOLOM      reduce using rule 32 (returnBoolFunction -> numericalConditionFunction .)
    LPAR            reduce using rule 32 (returnBoolFunction -> numericalConditionFunction .)
    RPAR            reduce using rule 32 (returnBoolFunction -> numericalConditionFunction .)


state 25

    (33) voidFunction -> callFunction .

    SEMMICOLOM      reduce using rule 33 (voidFunction -> callFunction .)


state 26

    (34) voidFunction -> valuesFunction .

    SEMMICOLOM      reduce using rule 34 (voidFunction -> valuesFunction .)


state 27

    (35) voidFunction -> iterativeFunction .

    SEMMICOLOM      reduce using rule 35 (voidFunction -> iterativeFunction .)


state 28

    (36) voidFunction -> printFunction .

    SEMMICOLOM      reduce using rule 36 (voidFunction -> printFunction .)


state 29

    (37) hammerFunction -> HAMMER . LPAR direction RPAR

    LPAR            shift and go to state 60


state 30

    (42) alterbFunction -> ALTERB . LPAR ID RPAR

    LPAR            shift and go to state 61


state 31

    (43) istrueFunction -> ISTRUE . LPAR BOOLVALUE RPAR
    (44) istrueFunction -> ISTRUE . LPAR returnBoolFunction RPAR
    (45) istrueFunction -> ISTRUE . LPAR ID RPAR

    LPAR            shift and go to state 62


state 32

    (55) callFunction -> CALL . LPAR ID RPAR

    LPAR            shift and go to state 63


state 33

    (56) valuesFunction -> VALUES . LPAR ID COMMA value RPAR
    (57) valuesFunction -> VALUES . LPAR ID COMMA alterFunction RPAR
    (58) valuesFunction -> VALUES . LPAR ID COMMA returnBoolFunction RPAR
    (59) valuesFunction -> VALUES . LPAR ID COMMA ID RPAR

    LPAR            shift and go to state 64


state 34

    (60) iterativeFunction -> repeatFunction .

    SEMMICOLOM      reduce using rule 60 (iterativeFunction -> repeatFunction .)


state 35

    (61) iterativeFunction -> untilFunction .

    SEMMICOLOM      reduce using rule 61 (iterativeFunction -> untilFunction .)


state 36

    (62) iterativeFunction -> whileFunction .

    SEMMICOLOM      reduce using rule 62 (iterativeFunction -> whileFunction .)


state 37

    (63) iterativeFunction -> casewhenFunction .

    SEMMICOLOM      reduce using rule 63 (iterativeFunction -> casewhenFunction .)


state 38

    (64) iterativeFunction -> caseFunction .

    SEMMICOLOM      reduce using rule 64 (iterativeFunction -> caseFunction .)


state 39

    (65) printFunction -> PRINTVALUES . LPAR ID consolePrint RPAR
    (66) printFunction -> PRINTVALUES . LPAR TEXT consolePrint RPAR

    LPAR            shift and go to state 65


state 40

    (77) repeatFunction -> REPEAT . LPAR insideInstruction BREAK SEMMICOLOM insideInstruction RPAR

    LPAR            shift and go to state 66


state 41

    (78) untilFunction -> UNTIL . instructionBlock BOOLVALUE
    (79) untilFunction -> UNTIL . instructionBlock returnBoolFunction
    (80) untilFunction -> UNTIL . instructionBlock ID
    (5) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 68

    instructionBlock               shift and go to state 67

state 42

    (81) whileFunction -> WHILE . BOOLVALUE instructionBlock
    (82) whileFunction -> WHILE . returnBoolFunction instructionBlock
    (83) whileFunction -> WHILE . ID instructionBlock
    (30) returnBoolFunction -> . alterbFunction
    (31) returnBoolFunction -> . istrueFunction
    (32) returnBoolFunction -> . numericalConditionFunction
    (42) alterbFunction -> . ALTERB LPAR ID RPAR
    (43) istrueFunction -> . ISTRUE LPAR BOOLVALUE RPAR
    (44) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (45) istrueFunction -> . ISTRUE LPAR ID RPAR
    (46) numericalConditionFunction -> . NUMVALUE logicOperator NUMVALUE
    (47) numericalConditionFunction -> . NUMVALUE logicOperator alterFunction
    (48) numericalConditionFunction -> . NUMVALUE logicOperator ID
    (49) numericalConditionFunction -> . alterFunction logicOperator NUMVALUE
    (50) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (51) numericalConditionFunction -> . alterFunction logicOperator ID
    (52) numericalConditionFunction -> . ID logicOperator NUMVALUE
    (53) numericalConditionFunction -> . ID logicOperator alterFunction
    (54) numericalConditionFunction -> . ID logicOperator ID
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR

    BOOLVALUE       shift and go to state 69
    ID              shift and go to state 71
    ALTERB          shift and go to state 30
    ISTRUE          shift and go to state 31
    NUMVALUE        shift and go to state 21
    ALTER           shift and go to state 20

    returnBoolFunction             shift and go to state 70
    alterbFunction                 shift and go to state 22
    istrueFunction                 shift and go to state 23
    numericalConditionFunction     shift and go to state 24
    alterFunction                  shift and go to state 72

state 43

    (84) casewhenFunction -> CASEWHEN . LPAR BOOLVALUE RPAR THEN instructionBlock elseExpression
    (85) casewhenFunction -> CASEWHEN . LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (86) casewhenFunction -> CASEWHEN . LPAR ID RPAR THEN instructionBlock elseExpression

    LPAR            shift and go to state 73


state 44

    (87) caseFunction -> CASE . ID WHEN value THEN instructionBlock whenExpression elseExpression

    ID              shift and go to state 74


state 45

    (1) program -> COMMENT outsideInstruction PPROC . instructionBlock SEMMICOLOM outsideInstruction
    (5) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 68

    instructionBlock               shift and go to state 75

state 46

    (2) outsideInstruction -> attribute SEMMICOLOM . outsideInstruction
    (2) outsideInstruction -> . attribute SEMMICOLOM outsideInstruction
    (3) outsideInstruction -> . function SEMMICOLOM outsideInstruction
    (4) outsideInstruction -> . empty
    (6) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (7) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (8) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (9) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (10) function -> . PROC ID instructionBlock
    (11) function -> . innerFunction
    (95) empty -> .
    (19) innerFunction -> . languageFunction
    (20) innerFunction -> . tagadaFunction
    (21) languageFunction -> . alterFunction
    (22) languageFunction -> . returnBoolFunction
    (23) languageFunction -> . voidFunction
    (24) tagadaFunction -> . MOVERIGHT
    (25) tagadaFunction -> . MOVELEFT
    (26) tagadaFunction -> . STOP
    (27) tagadaFunction -> . hammerFunction
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (30) returnBoolFunction -> . alterbFunction
    (31) returnBoolFunction -> . istrueFunction
    (32) returnBoolFunction -> . numericalConditionFunction
    (33) voidFunction -> . callFunction
    (34) voidFunction -> . valuesFunction
    (35) voidFunction -> . iterativeFunction
    (36) voidFunction -> . printFunction
    (37) hammerFunction -> . HAMMER LPAR direction RPAR
    (42) alterbFunction -> . ALTERB LPAR ID RPAR
    (43) istrueFunction -> . ISTRUE LPAR BOOLVALUE RPAR
    (44) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (45) istrueFunction -> . ISTRUE LPAR ID RPAR
    (46) numericalConditionFunction -> . NUMVALUE logicOperator NUMVALUE
    (47) numericalConditionFunction -> . NUMVALUE logicOperator alterFunction
    (48) numericalConditionFunction -> . NUMVALUE logicOperator ID
    (49) numericalConditionFunction -> . alterFunction logicOperator NUMVALUE
    (50) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (51) numericalConditionFunction -> . alterFunction logicOperator ID
    (52) numericalConditionFunction -> . ID logicOperator NUMVALUE
    (53) numericalConditionFunction -> . ID logicOperator alterFunction
    (54) numericalConditionFunction -> . ID logicOperator ID
    (55) callFunction -> . CALL LPAR ID RPAR
    (56) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (57) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (58) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (59) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (60) iterativeFunction -> . repeatFunction
    (61) iterativeFunction -> . untilFunction
    (62) iterativeFunction -> . whileFunction
    (63) iterativeFunction -> . casewhenFunction
    (64) iterativeFunction -> . caseFunction
    (65) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (66) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (77) repeatFunction -> . REPEAT LPAR insideInstruction BREAK SEMMICOLOM insideInstruction RPAR
    (78) untilFunction -> . UNTIL instructionBlock BOOLVALUE
    (79) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (80) untilFunction -> . UNTIL instructionBlock ID
    (81) whileFunction -> . WHILE BOOLVALUE instructionBlock
    (82) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (83) whileFunction -> . WHILE ID instructionBlock
    (84) casewhenFunction -> . CASEWHEN LPAR BOOLVALUE RPAR THEN instructionBlock elseExpression
    (85) casewhenFunction -> . CASEWHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (86) casewhenFunction -> . CASEWHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (87) caseFunction -> . CASE ID WHEN value THEN instructionBlock whenExpression elseExpression

    NEW             shift and go to state 7
    PROC            shift and go to state 11
    PPROC           reduce using rule 95 (empty -> .)
    $end            reduce using rule 95 (empty -> .)
    MOVERIGHT       shift and go to state 16
    MOVELEFT        shift and go to state 17
    STOP            shift and go to state 18
    ALTER           shift and go to state 20
    HAMMER          shift and go to state 29
    ALTERB          shift and go to state 30
    ISTRUE          shift and go to state 31
    NUMVALUE        shift and go to state 21
    ID              shift and go to state 8
    CALL            shift and go to state 32
    VALUES          shift and go to state 33
    PRINTVALUES     shift and go to state 39
    REPEAT          shift and go to state 40
    UNTIL           shift and go to state 41
    WHILE           shift and go to state 42
    CASEWHEN        shift and go to state 43
    CASE            shift and go to state 44

    attribute                      shift and go to state 4
    outsideInstruction             shift and go to state 76
    function                       shift and go to state 5
    empty                          shift and go to state 6
    alterFunction                  shift and go to state 9
    returnBoolFunction             shift and go to state 10
    innerFunction                  shift and go to state 12
    languageFunction               shift and go to state 13
    tagadaFunction                 shift and go to state 14
    voidFunction                   shift and go to state 15
    hammerFunction                 shift and go to state 19
    alterbFunction                 shift and go to state 22
    istrueFunction                 shift and go to state 23
    numericalConditionFunction     shift and go to state 24
    callFunction                   shift and go to state 25
    valuesFunction                 shift and go to state 26
    iterativeFunction              shift and go to state 27
    printFunction                  shift and go to state 28
    repeatFunction                 shift and go to state 34
    untilFunction                  shift and go to state 35
    whileFunction                  shift and go to state 36
    casewhenFunction               shift and go to state 37
    caseFunction                   shift and go to state 38

state 47

    (3) outsideInstruction -> function SEMMICOLOM . outsideInstruction
    (2) outsideInstruction -> . attribute SEMMICOLOM outsideInstruction
    (3) outsideInstruction -> . function SEMMICOLOM outsideInstruction
    (4) outsideInstruction -> . empty
    (6) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (7) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (8) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (9) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (10) function -> . PROC ID instructionBlock
    (11) function -> . innerFunction
    (95) empty -> .
    (19) innerFunction -> . languageFunction
    (20) innerFunction -> . tagadaFunction
    (21) languageFunction -> . alterFunction
    (22) languageFunction -> . returnBoolFunction
    (23) languageFunction -> . voidFunction
    (24) tagadaFunction -> . MOVERIGHT
    (25) tagadaFunction -> . MOVELEFT
    (26) tagadaFunction -> . STOP
    (27) tagadaFunction -> . hammerFunction
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (30) returnBoolFunction -> . alterbFunction
    (31) returnBoolFunction -> . istrueFunction
    (32) returnBoolFunction -> . numericalConditionFunction
    (33) voidFunction -> . callFunction
    (34) voidFunction -> . valuesFunction
    (35) voidFunction -> . iterativeFunction
    (36) voidFunction -> . printFunction
    (37) hammerFunction -> . HAMMER LPAR direction RPAR
    (42) alterbFunction -> . ALTERB LPAR ID RPAR
    (43) istrueFunction -> . ISTRUE LPAR BOOLVALUE RPAR
    (44) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (45) istrueFunction -> . ISTRUE LPAR ID RPAR
    (46) numericalConditionFunction -> . NUMVALUE logicOperator NUMVALUE
    (47) numericalConditionFunction -> . NUMVALUE logicOperator alterFunction
    (48) numericalConditionFunction -> . NUMVALUE logicOperator ID
    (49) numericalConditionFunction -> . alterFunction logicOperator NUMVALUE
    (50) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (51) numericalConditionFunction -> . alterFunction logicOperator ID
    (52) numericalConditionFunction -> . ID logicOperator NUMVALUE
    (53) numericalConditionFunction -> . ID logicOperator alterFunction
    (54) numericalConditionFunction -> . ID logicOperator ID
    (55) callFunction -> . CALL LPAR ID RPAR
    (56) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (57) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (58) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (59) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (60) iterativeFunction -> . repeatFunction
    (61) iterativeFunction -> . untilFunction
    (62) iterativeFunction -> . whileFunction
    (63) iterativeFunction -> . casewhenFunction
    (64) iterativeFunction -> . caseFunction
    (65) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (66) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (77) repeatFunction -> . REPEAT LPAR insideInstruction BREAK SEMMICOLOM insideInstruction RPAR
    (78) untilFunction -> . UNTIL instructionBlock BOOLVALUE
    (79) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (80) untilFunction -> . UNTIL instructionBlock ID
    (81) whileFunction -> . WHILE BOOLVALUE instructionBlock
    (82) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (83) whileFunction -> . WHILE ID instructionBlock
    (84) casewhenFunction -> . CASEWHEN LPAR BOOLVALUE RPAR THEN instructionBlock elseExpression
    (85) casewhenFunction -> . CASEWHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (86) casewhenFunction -> . CASEWHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (87) caseFunction -> . CASE ID WHEN value THEN instructionBlock whenExpression elseExpression

    NEW             shift and go to state 7
    PROC            shift and go to state 11
    PPROC           reduce using rule 95 (empty -> .)
    $end            reduce using rule 95 (empty -> .)
    MOVERIGHT       shift and go to state 16
    MOVELEFT        shift and go to state 17
    STOP            shift and go to state 18
    ALTER           shift and go to state 20
    HAMMER          shift and go to state 29
    ALTERB          shift and go to state 30
    ISTRUE          shift and go to state 31
    NUMVALUE        shift and go to state 21
    ID              shift and go to state 8
    CALL            shift and go to state 32
    VALUES          shift and go to state 33
    PRINTVALUES     shift and go to state 39
    REPEAT          shift and go to state 40
    UNTIL           shift and go to state 41
    WHILE           shift and go to state 42
    CASEWHEN        shift and go to state 43
    CASE            shift and go to state 44

    function                       shift and go to state 5
    outsideInstruction             shift and go to state 77
    attribute                      shift and go to state 4
    empty                          shift and go to state 6
    alterFunction                  shift and go to state 9
    returnBoolFunction             shift and go to state 10
    innerFunction                  shift and go to state 12
    languageFunction               shift and go to state 13
    tagadaFunction                 shift and go to state 14
    voidFunction                   shift and go to state 15
    hammerFunction                 shift and go to state 19
    alterbFunction                 shift and go to state 22
    istrueFunction                 shift and go to state 23
    numericalConditionFunction     shift and go to state 24
    callFunction                   shift and go to state 25
    valuesFunction                 shift and go to state 26
    iterativeFunction              shift and go to state 27
    printFunction                  shift and go to state 28
    repeatFunction                 shift and go to state 34
    untilFunction                  shift and go to state 35
    whileFunction                  shift and go to state 36
    casewhenFunction               shift and go to state 37
    caseFunction                   shift and go to state 38

state 48

    (6) attribute -> NEW ID . COMMA LPAR datatype COMMA value RPAR
    (7) attribute -> NEW ID . COMMA LPAR datatype COMMA alterFunction RPAR
    (8) attribute -> NEW ID . COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (9) attribute -> NEW ID . COMMA LPAR datatype COMMA ID RPAR

    COMMA           shift and go to state 78


state 49

    (52) numericalConditionFunction -> ID logicOperator . NUMVALUE
    (53) numericalConditionFunction -> ID logicOperator . alterFunction
    (54) numericalConditionFunction -> ID logicOperator . ID
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR

    NUMVALUE        shift and go to state 80
    ID              shift and go to state 79
    ALTER           shift and go to state 20

    alterFunction                  shift and go to state 81

state 50

    (71) logicOperator -> EEOP .

    NUMVALUE        reduce using rule 71 (logicOperator -> EEOP .)
    ID              reduce using rule 71 (logicOperator -> EEOP .)
    ALTER           reduce using rule 71 (logicOperator -> EEOP .)


state 51

    (72) logicOperator -> NEOP .

    NUMVALUE        reduce using rule 72 (logicOperator -> NEOP .)
    ID              reduce using rule 72 (logicOperator -> NEOP .)
    ALTER           reduce using rule 72 (logicOperator -> NEOP .)


state 52

    (73) logicOperator -> GETOP .

    NUMVALUE        reduce using rule 73 (logicOperator -> GETOP .)
    ID              reduce using rule 73 (logicOperator -> GETOP .)
    ALTER           reduce using rule 73 (logicOperator -> GETOP .)


state 53

    (74) logicOperator -> LETOP .

    NUMVALUE        reduce using rule 74 (logicOperator -> LETOP .)
    ID              reduce using rule 74 (logicOperator -> LETOP .)
    ALTER           reduce using rule 74 (logicOperator -> LETOP .)


state 54

    (75) logicOperator -> GTOP .

    NUMVALUE        reduce using rule 75 (logicOperator -> GTOP .)
    ID              reduce using rule 75 (logicOperator -> GTOP .)
    ALTER           reduce using rule 75 (logicOperator -> GTOP .)


state 55

    (76) logicOperator -> LTOP .

    NUMVALUE        reduce using rule 76 (logicOperator -> LTOP .)
    ID              reduce using rule 76 (logicOperator -> LTOP .)
    ALTER           reduce using rule 76 (logicOperator -> LTOP .)


state 56

    (49) numericalConditionFunction -> alterFunction logicOperator . NUMVALUE
    (50) numericalConditionFunction -> alterFunction logicOperator . alterFunction
    (51) numericalConditionFunction -> alterFunction logicOperator . ID
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR

    NUMVALUE        shift and go to state 83
    ID              shift and go to state 84
    ALTER           shift and go to state 20

    alterFunction                  shift and go to state 82

state 57

    (10) function -> PROC ID . instructionBlock
    (5) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 68

    instructionBlock               shift and go to state 85

state 58

    (28) alterFunction -> ALTER LPAR . ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> ALTER LPAR . ID COMMA numericalOperator COMMA ID RPAR

    ID              shift and go to state 86


state 59

    (46) numericalConditionFunction -> NUMVALUE logicOperator . NUMVALUE
    (47) numericalConditionFunction -> NUMVALUE logicOperator . alterFunction
    (48) numericalConditionFunction -> NUMVALUE logicOperator . ID
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR

    NUMVALUE        shift and go to state 87
    ID              shift and go to state 89
    ALTER           shift and go to state 20

    alterFunction                  shift and go to state 88

state 60

    (37) hammerFunction -> HAMMER LPAR . direction RPAR
    (67) direction -> . NORTH
    (68) direction -> . SOUTH
    (69) direction -> . EAST
    (70) direction -> . WEST

    NORTH           shift and go to state 91
    SOUTH           shift and go to state 92
    EAST            shift and go to state 93
    WEST            shift and go to state 94

    direction                      shift and go to state 90

state 61

    (42) alterbFunction -> ALTERB LPAR . ID RPAR

    ID              shift and go to state 95


state 62

    (43) istrueFunction -> ISTRUE LPAR . BOOLVALUE RPAR
    (44) istrueFunction -> ISTRUE LPAR . returnBoolFunction RPAR
    (45) istrueFunction -> ISTRUE LPAR . ID RPAR
    (30) returnBoolFunction -> . alterbFunction
    (31) returnBoolFunction -> . istrueFunction
    (32) returnBoolFunction -> . numericalConditionFunction
    (42) alterbFunction -> . ALTERB LPAR ID RPAR
    (43) istrueFunction -> . ISTRUE LPAR BOOLVALUE RPAR
    (44) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (45) istrueFunction -> . ISTRUE LPAR ID RPAR
    (46) numericalConditionFunction -> . NUMVALUE logicOperator NUMVALUE
    (47) numericalConditionFunction -> . NUMVALUE logicOperator alterFunction
    (48) numericalConditionFunction -> . NUMVALUE logicOperator ID
    (49) numericalConditionFunction -> . alterFunction logicOperator NUMVALUE
    (50) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (51) numericalConditionFunction -> . alterFunction logicOperator ID
    (52) numericalConditionFunction -> . ID logicOperator NUMVALUE
    (53) numericalConditionFunction -> . ID logicOperator alterFunction
    (54) numericalConditionFunction -> . ID logicOperator ID
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR

    BOOLVALUE       shift and go to state 96
    ID              shift and go to state 98
    ALTERB          shift and go to state 30
    ISTRUE          shift and go to state 31
    NUMVALUE        shift and go to state 21
    ALTER           shift and go to state 20

    returnBoolFunction             shift and go to state 97
    alterbFunction                 shift and go to state 22
    istrueFunction                 shift and go to state 23
    numericalConditionFunction     shift and go to state 24
    alterFunction                  shift and go to state 72

state 63

    (55) callFunction -> CALL LPAR . ID RPAR

    ID              shift and go to state 99


state 64

    (56) valuesFunction -> VALUES LPAR . ID COMMA value RPAR
    (57) valuesFunction -> VALUES LPAR . ID COMMA alterFunction RPAR
    (58) valuesFunction -> VALUES LPAR . ID COMMA returnBoolFunction RPAR
    (59) valuesFunction -> VALUES LPAR . ID COMMA ID RPAR

    ID              shift and go to state 100


state 65

    (65) printFunction -> PRINTVALUES LPAR . ID consolePrint RPAR
    (66) printFunction -> PRINTVALUES LPAR . TEXT consolePrint RPAR

    ID              shift and go to state 101
    TEXT            shift and go to state 102


state 66

    (77) repeatFunction -> REPEAT LPAR . insideInstruction BREAK SEMMICOLOM insideInstruction RPAR
    (12) insideInstruction -> . attribute SEMMICOLOM insideInstruction
    (13) insideInstruction -> . innerFunction SEMMICOLOM insideInstruction
    (14) insideInstruction -> . empty
    (6) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (7) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (8) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (9) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (19) innerFunction -> . languageFunction
    (20) innerFunction -> . tagadaFunction
    (95) empty -> .
    (21) languageFunction -> . alterFunction
    (22) languageFunction -> . returnBoolFunction
    (23) languageFunction -> . voidFunction
    (24) tagadaFunction -> . MOVERIGHT
    (25) tagadaFunction -> . MOVELEFT
    (26) tagadaFunction -> . STOP
    (27) tagadaFunction -> . hammerFunction
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (30) returnBoolFunction -> . alterbFunction
    (31) returnBoolFunction -> . istrueFunction
    (32) returnBoolFunction -> . numericalConditionFunction
    (33) voidFunction -> . callFunction
    (34) voidFunction -> . valuesFunction
    (35) voidFunction -> . iterativeFunction
    (36) voidFunction -> . printFunction
    (37) hammerFunction -> . HAMMER LPAR direction RPAR
    (42) alterbFunction -> . ALTERB LPAR ID RPAR
    (43) istrueFunction -> . ISTRUE LPAR BOOLVALUE RPAR
    (44) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (45) istrueFunction -> . ISTRUE LPAR ID RPAR
    (46) numericalConditionFunction -> . NUMVALUE logicOperator NUMVALUE
    (47) numericalConditionFunction -> . NUMVALUE logicOperator alterFunction
    (48) numericalConditionFunction -> . NUMVALUE logicOperator ID
    (49) numericalConditionFunction -> . alterFunction logicOperator NUMVALUE
    (50) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (51) numericalConditionFunction -> . alterFunction logicOperator ID
    (52) numericalConditionFunction -> . ID logicOperator NUMVALUE
    (53) numericalConditionFunction -> . ID logicOperator alterFunction
    (54) numericalConditionFunction -> . ID logicOperator ID
    (55) callFunction -> . CALL LPAR ID RPAR
    (56) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (57) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (58) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (59) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (60) iterativeFunction -> . repeatFunction
    (61) iterativeFunction -> . untilFunction
    (62) iterativeFunction -> . whileFunction
    (63) iterativeFunction -> . casewhenFunction
    (64) iterativeFunction -> . caseFunction
    (65) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (66) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (77) repeatFunction -> . REPEAT LPAR insideInstruction BREAK SEMMICOLOM insideInstruction RPAR
    (78) untilFunction -> . UNTIL instructionBlock BOOLVALUE
    (79) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (80) untilFunction -> . UNTIL instructionBlock ID
    (81) whileFunction -> . WHILE BOOLVALUE instructionBlock
    (82) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (83) whileFunction -> . WHILE ID instructionBlock
    (84) casewhenFunction -> . CASEWHEN LPAR BOOLVALUE RPAR THEN instructionBlock elseExpression
    (85) casewhenFunction -> . CASEWHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (86) casewhenFunction -> . CASEWHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (87) caseFunction -> . CASE ID WHEN value THEN instructionBlock whenExpression elseExpression

    NEW             shift and go to state 7
    BREAK           reduce using rule 95 (empty -> .)
    MOVERIGHT       shift and go to state 16
    MOVELEFT        shift and go to state 17
    STOP            shift and go to state 18
    ALTER           shift and go to state 20
    HAMMER          shift and go to state 29
    ALTERB          shift and go to state 30
    ISTRUE          shift and go to state 31
    NUMVALUE        shift and go to state 21
    ID              shift and go to state 8
    CALL            shift and go to state 32
    VALUES          shift and go to state 33
    PRINTVALUES     shift and go to state 39
    REPEAT          shift and go to state 40
    UNTIL           shift and go to state 41
    WHILE           shift and go to state 42
    CASEWHEN        shift and go to state 43
    CASE            shift and go to state 44

    insideInstruction              shift and go to state 103
    attribute                      shift and go to state 104
    innerFunction                  shift and go to state 105
    empty                          shift and go to state 106
    alterFunction                  shift and go to state 9
    returnBoolFunction             shift and go to state 10
    languageFunction               shift and go to state 13
    tagadaFunction                 shift and go to state 14
    voidFunction                   shift and go to state 15
    hammerFunction                 shift and go to state 19
    alterbFunction                 shift and go to state 22
    istrueFunction                 shift and go to state 23
    numericalConditionFunction     shift and go to state 24
    callFunction                   shift and go to state 25
    valuesFunction                 shift and go to state 26
    iterativeFunction              shift and go to state 27
    printFunction                  shift and go to state 28
    repeatFunction                 shift and go to state 34
    untilFunction                  shift and go to state 35
    whileFunction                  shift and go to state 36
    casewhenFunction               shift and go to state 37
    caseFunction                   shift and go to state 38

state 67

    (78) untilFunction -> UNTIL instructionBlock . BOOLVALUE
    (79) untilFunction -> UNTIL instructionBlock . returnBoolFunction
    (80) untilFunction -> UNTIL instructionBlock . ID
    (30) returnBoolFunction -> . alterbFunction
    (31) returnBoolFunction -> . istrueFunction
    (32) returnBoolFunction -> . numericalConditionFunction
    (42) alterbFunction -> . ALTERB LPAR ID RPAR
    (43) istrueFunction -> . ISTRUE LPAR BOOLVALUE RPAR
    (44) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (45) istrueFunction -> . ISTRUE LPAR ID RPAR
    (46) numericalConditionFunction -> . NUMVALUE logicOperator NUMVALUE
    (47) numericalConditionFunction -> . NUMVALUE logicOperator alterFunction
    (48) numericalConditionFunction -> . NUMVALUE logicOperator ID
    (49) numericalConditionFunction -> . alterFunction logicOperator NUMVALUE
    (50) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (51) numericalConditionFunction -> . alterFunction logicOperator ID
    (52) numericalConditionFunction -> . ID logicOperator NUMVALUE
    (53) numericalConditionFunction -> . ID logicOperator alterFunction
    (54) numericalConditionFunction -> . ID logicOperator ID
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR

    BOOLVALUE       shift and go to state 107
    ID              shift and go to state 109
    ALTERB          shift and go to state 30
    ISTRUE          shift and go to state 31
    NUMVALUE        shift and go to state 21
    ALTER           shift and go to state 20

    returnBoolFunction             shift and go to state 108
    alterbFunction                 shift and go to state 22
    istrueFunction                 shift and go to state 23
    numericalConditionFunction     shift and go to state 24
    alterFunction                  shift and go to state 72

state 68

    (5) instructionBlock -> LPAR . insideInstruction RPAR
    (12) insideInstruction -> . attribute SEMMICOLOM insideInstruction
    (13) insideInstruction -> . innerFunction SEMMICOLOM insideInstruction
    (14) insideInstruction -> . empty
    (6) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (7) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (8) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (9) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (19) innerFunction -> . languageFunction
    (20) innerFunction -> . tagadaFunction
    (95) empty -> .
    (21) languageFunction -> . alterFunction
    (22) languageFunction -> . returnBoolFunction
    (23) languageFunction -> . voidFunction
    (24) tagadaFunction -> . MOVERIGHT
    (25) tagadaFunction -> . MOVELEFT
    (26) tagadaFunction -> . STOP
    (27) tagadaFunction -> . hammerFunction
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (30) returnBoolFunction -> . alterbFunction
    (31) returnBoolFunction -> . istrueFunction
    (32) returnBoolFunction -> . numericalConditionFunction
    (33) voidFunction -> . callFunction
    (34) voidFunction -> . valuesFunction
    (35) voidFunction -> . iterativeFunction
    (36) voidFunction -> . printFunction
    (37) hammerFunction -> . HAMMER LPAR direction RPAR
    (42) alterbFunction -> . ALTERB LPAR ID RPAR
    (43) istrueFunction -> . ISTRUE LPAR BOOLVALUE RPAR
    (44) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (45) istrueFunction -> . ISTRUE LPAR ID RPAR
    (46) numericalConditionFunction -> . NUMVALUE logicOperator NUMVALUE
    (47) numericalConditionFunction -> . NUMVALUE logicOperator alterFunction
    (48) numericalConditionFunction -> . NUMVALUE logicOperator ID
    (49) numericalConditionFunction -> . alterFunction logicOperator NUMVALUE
    (50) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (51) numericalConditionFunction -> . alterFunction logicOperator ID
    (52) numericalConditionFunction -> . ID logicOperator NUMVALUE
    (53) numericalConditionFunction -> . ID logicOperator alterFunction
    (54) numericalConditionFunction -> . ID logicOperator ID
    (55) callFunction -> . CALL LPAR ID RPAR
    (56) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (57) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (58) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (59) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (60) iterativeFunction -> . repeatFunction
    (61) iterativeFunction -> . untilFunction
    (62) iterativeFunction -> . whileFunction
    (63) iterativeFunction -> . casewhenFunction
    (64) iterativeFunction -> . caseFunction
    (65) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (66) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (77) repeatFunction -> . REPEAT LPAR insideInstruction BREAK SEMMICOLOM insideInstruction RPAR
    (78) untilFunction -> . UNTIL instructionBlock BOOLVALUE
    (79) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (80) untilFunction -> . UNTIL instructionBlock ID
    (81) whileFunction -> . WHILE BOOLVALUE instructionBlock
    (82) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (83) whileFunction -> . WHILE ID instructionBlock
    (84) casewhenFunction -> . CASEWHEN LPAR BOOLVALUE RPAR THEN instructionBlock elseExpression
    (85) casewhenFunction -> . CASEWHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (86) casewhenFunction -> . CASEWHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (87) caseFunction -> . CASE ID WHEN value THEN instructionBlock whenExpression elseExpression

    NEW             shift and go to state 7
    RPAR            reduce using rule 95 (empty -> .)
    MOVERIGHT       shift and go to state 16
    MOVELEFT        shift and go to state 17
    STOP            shift and go to state 18
    ALTER           shift and go to state 20
    HAMMER          shift and go to state 29
    ALTERB          shift and go to state 30
    ISTRUE          shift and go to state 31
    NUMVALUE        shift and go to state 21
    ID              shift and go to state 8
    CALL            shift and go to state 32
    VALUES          shift and go to state 33
    PRINTVALUES     shift and go to state 39
    REPEAT          shift and go to state 40
    UNTIL           shift and go to state 41
    WHILE           shift and go to state 42
    CASEWHEN        shift and go to state 43
    CASE            shift and go to state 44

    insideInstruction              shift and go to state 110
    attribute                      shift and go to state 104
    innerFunction                  shift and go to state 105
    empty                          shift and go to state 106
    alterFunction                  shift and go to state 9
    returnBoolFunction             shift and go to state 10
    languageFunction               shift and go to state 13
    tagadaFunction                 shift and go to state 14
    voidFunction                   shift and go to state 15
    hammerFunction                 shift and go to state 19
    alterbFunction                 shift and go to state 22
    istrueFunction                 shift and go to state 23
    numericalConditionFunction     shift and go to state 24
    callFunction                   shift and go to state 25
    valuesFunction                 shift and go to state 26
    iterativeFunction              shift and go to state 27
    printFunction                  shift and go to state 28
    repeatFunction                 shift and go to state 34
    untilFunction                  shift and go to state 35
    whileFunction                  shift and go to state 36
    casewhenFunction               shift and go to state 37
    caseFunction                   shift and go to state 38

state 69

    (81) whileFunction -> WHILE BOOLVALUE . instructionBlock
    (5) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 68

    instructionBlock               shift and go to state 111

state 70

    (82) whileFunction -> WHILE returnBoolFunction . instructionBlock
    (5) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 68

    instructionBlock               shift and go to state 112

state 71

    (83) whileFunction -> WHILE ID . instructionBlock
    (52) numericalConditionFunction -> ID . logicOperator NUMVALUE
    (53) numericalConditionFunction -> ID . logicOperator alterFunction
    (54) numericalConditionFunction -> ID . logicOperator ID
    (5) instructionBlock -> . LPAR insideInstruction RPAR
    (71) logicOperator -> . EEOP
    (72) logicOperator -> . NEOP
    (73) logicOperator -> . GETOP
    (74) logicOperator -> . LETOP
    (75) logicOperator -> . GTOP
    (76) logicOperator -> . LTOP

    LPAR            shift and go to state 68
    EEOP            shift and go to state 50
    NEOP            shift and go to state 51
    GETOP           shift and go to state 52
    LETOP           shift and go to state 53
    GTOP            shift and go to state 54
    LTOP            shift and go to state 55

    instructionBlock               shift and go to state 113
    logicOperator                  shift and go to state 49

state 72

    (49) numericalConditionFunction -> alterFunction . logicOperator NUMVALUE
    (50) numericalConditionFunction -> alterFunction . logicOperator alterFunction
    (51) numericalConditionFunction -> alterFunction . logicOperator ID
    (71) logicOperator -> . EEOP
    (72) logicOperator -> . NEOP
    (73) logicOperator -> . GETOP
    (74) logicOperator -> . LETOP
    (75) logicOperator -> . GTOP
    (76) logicOperator -> . LTOP

    EEOP            shift and go to state 50
    NEOP            shift and go to state 51
    GETOP           shift and go to state 52
    LETOP           shift and go to state 53
    GTOP            shift and go to state 54
    LTOP            shift and go to state 55

    logicOperator                  shift and go to state 56

state 73

    (84) casewhenFunction -> CASEWHEN LPAR . BOOLVALUE RPAR THEN instructionBlock elseExpression
    (85) casewhenFunction -> CASEWHEN LPAR . returnBoolFunction RPAR THEN instructionBlock elseExpression
    (86) casewhenFunction -> CASEWHEN LPAR . ID RPAR THEN instructionBlock elseExpression
    (30) returnBoolFunction -> . alterbFunction
    (31) returnBoolFunction -> . istrueFunction
    (32) returnBoolFunction -> . numericalConditionFunction
    (42) alterbFunction -> . ALTERB LPAR ID RPAR
    (43) istrueFunction -> . ISTRUE LPAR BOOLVALUE RPAR
    (44) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (45) istrueFunction -> . ISTRUE LPAR ID RPAR
    (46) numericalConditionFunction -> . NUMVALUE logicOperator NUMVALUE
    (47) numericalConditionFunction -> . NUMVALUE logicOperator alterFunction
    (48) numericalConditionFunction -> . NUMVALUE logicOperator ID
    (49) numericalConditionFunction -> . alterFunction logicOperator NUMVALUE
    (50) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (51) numericalConditionFunction -> . alterFunction logicOperator ID
    (52) numericalConditionFunction -> . ID logicOperator NUMVALUE
    (53) numericalConditionFunction -> . ID logicOperator alterFunction
    (54) numericalConditionFunction -> . ID logicOperator ID
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR

    BOOLVALUE       shift and go to state 114
    ID              shift and go to state 116
    ALTERB          shift and go to state 30
    ISTRUE          shift and go to state 31
    NUMVALUE        shift and go to state 21
    ALTER           shift and go to state 20

    returnBoolFunction             shift and go to state 115
    alterbFunction                 shift and go to state 22
    istrueFunction                 shift and go to state 23
    numericalConditionFunction     shift and go to state 24
    alterFunction                  shift and go to state 72

state 74

    (87) caseFunction -> CASE ID . WHEN value THEN instructionBlock whenExpression elseExpression

    WHEN            shift and go to state 117


state 75

    (1) program -> COMMENT outsideInstruction PPROC instructionBlock . SEMMICOLOM outsideInstruction

    SEMMICOLOM      shift and go to state 118


state 76

    (2) outsideInstruction -> attribute SEMMICOLOM outsideInstruction .

    PPROC           reduce using rule 2 (outsideInstruction -> attribute SEMMICOLOM outsideInstruction .)
    $end            reduce using rule 2 (outsideInstruction -> attribute SEMMICOLOM outsideInstruction .)


state 77

    (3) outsideInstruction -> function SEMMICOLOM outsideInstruction .

    PPROC           reduce using rule 3 (outsideInstruction -> function SEMMICOLOM outsideInstruction .)
    $end            reduce using rule 3 (outsideInstruction -> function SEMMICOLOM outsideInstruction .)


state 78

    (6) attribute -> NEW ID COMMA . LPAR datatype COMMA value RPAR
    (7) attribute -> NEW ID COMMA . LPAR datatype COMMA alterFunction RPAR
    (8) attribute -> NEW ID COMMA . LPAR datatype COMMA returnBoolFunction RPAR
    (9) attribute -> NEW ID COMMA . LPAR datatype COMMA ID RPAR

    LPAR            shift and go to state 119


state 79

    (54) numericalConditionFunction -> ID logicOperator ID .

    SEMMICOLOM      reduce using rule 54 (numericalConditionFunction -> ID logicOperator ID .)
    LPAR            reduce using rule 54 (numericalConditionFunction -> ID logicOperator ID .)
    RPAR            reduce using rule 54 (numericalConditionFunction -> ID logicOperator ID .)


state 80

    (52) numericalConditionFunction -> ID logicOperator NUMVALUE .

    SEMMICOLOM      reduce using rule 52 (numericalConditionFunction -> ID logicOperator NUMVALUE .)
    LPAR            reduce using rule 52 (numericalConditionFunction -> ID logicOperator NUMVALUE .)
    RPAR            reduce using rule 52 (numericalConditionFunction -> ID logicOperator NUMVALUE .)


state 81

    (53) numericalConditionFunction -> ID logicOperator alterFunction .

    SEMMICOLOM      reduce using rule 53 (numericalConditionFunction -> ID logicOperator alterFunction .)
    LPAR            reduce using rule 53 (numericalConditionFunction -> ID logicOperator alterFunction .)
    RPAR            reduce using rule 53 (numericalConditionFunction -> ID logicOperator alterFunction .)


state 82

    (50) numericalConditionFunction -> alterFunction logicOperator alterFunction .

    SEMMICOLOM      reduce using rule 50 (numericalConditionFunction -> alterFunction logicOperator alterFunction .)
    LPAR            reduce using rule 50 (numericalConditionFunction -> alterFunction logicOperator alterFunction .)
    RPAR            reduce using rule 50 (numericalConditionFunction -> alterFunction logicOperator alterFunction .)


state 83

    (49) numericalConditionFunction -> alterFunction logicOperator NUMVALUE .

    SEMMICOLOM      reduce using rule 49 (numericalConditionFunction -> alterFunction logicOperator NUMVALUE .)
    LPAR            reduce using rule 49 (numericalConditionFunction -> alterFunction logicOperator NUMVALUE .)
    RPAR            reduce using rule 49 (numericalConditionFunction -> alterFunction logicOperator NUMVALUE .)


state 84

    (51) numericalConditionFunction -> alterFunction logicOperator ID .

    SEMMICOLOM      reduce using rule 51 (numericalConditionFunction -> alterFunction logicOperator ID .)
    LPAR            reduce using rule 51 (numericalConditionFunction -> alterFunction logicOperator ID .)
    RPAR            reduce using rule 51 (numericalConditionFunction -> alterFunction logicOperator ID .)


state 85

    (10) function -> PROC ID instructionBlock .

    SEMMICOLOM      reduce using rule 10 (function -> PROC ID instructionBlock .)


state 86

    (28) alterFunction -> ALTER LPAR ID . COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> ALTER LPAR ID . COMMA numericalOperator COMMA ID RPAR

    COMMA           shift and go to state 120


state 87

    (46) numericalConditionFunction -> NUMVALUE logicOperator NUMVALUE .

    SEMMICOLOM      reduce using rule 46 (numericalConditionFunction -> NUMVALUE logicOperator NUMVALUE .)
    LPAR            reduce using rule 46 (numericalConditionFunction -> NUMVALUE logicOperator NUMVALUE .)
    RPAR            reduce using rule 46 (numericalConditionFunction -> NUMVALUE logicOperator NUMVALUE .)


state 88

    (47) numericalConditionFunction -> NUMVALUE logicOperator alterFunction .

    SEMMICOLOM      reduce using rule 47 (numericalConditionFunction -> NUMVALUE logicOperator alterFunction .)
    LPAR            reduce using rule 47 (numericalConditionFunction -> NUMVALUE logicOperator alterFunction .)
    RPAR            reduce using rule 47 (numericalConditionFunction -> NUMVALUE logicOperator alterFunction .)


state 89

    (48) numericalConditionFunction -> NUMVALUE logicOperator ID .

    SEMMICOLOM      reduce using rule 48 (numericalConditionFunction -> NUMVALUE logicOperator ID .)
    LPAR            reduce using rule 48 (numericalConditionFunction -> NUMVALUE logicOperator ID .)
    RPAR            reduce using rule 48 (numericalConditionFunction -> NUMVALUE logicOperator ID .)


state 90

    (37) hammerFunction -> HAMMER LPAR direction . RPAR

    RPAR            shift and go to state 121


state 91

    (67) direction -> NORTH .

    RPAR            reduce using rule 67 (direction -> NORTH .)


state 92

    (68) direction -> SOUTH .

    RPAR            reduce using rule 68 (direction -> SOUTH .)


state 93

    (69) direction -> EAST .

    RPAR            reduce using rule 69 (direction -> EAST .)


state 94

    (70) direction -> WEST .

    RPAR            reduce using rule 70 (direction -> WEST .)


state 95

    (42) alterbFunction -> ALTERB LPAR ID . RPAR

    RPAR            shift and go to state 122


state 96

    (43) istrueFunction -> ISTRUE LPAR BOOLVALUE . RPAR

    RPAR            shift and go to state 123


state 97

    (44) istrueFunction -> ISTRUE LPAR returnBoolFunction . RPAR

    RPAR            shift and go to state 124


state 98

    (45) istrueFunction -> ISTRUE LPAR ID . RPAR
    (52) numericalConditionFunction -> ID . logicOperator NUMVALUE
    (53) numericalConditionFunction -> ID . logicOperator alterFunction
    (54) numericalConditionFunction -> ID . logicOperator ID
    (71) logicOperator -> . EEOP
    (72) logicOperator -> . NEOP
    (73) logicOperator -> . GETOP
    (74) logicOperator -> . LETOP
    (75) logicOperator -> . GTOP
    (76) logicOperator -> . LTOP

    RPAR            shift and go to state 125
    EEOP            shift and go to state 50
    NEOP            shift and go to state 51
    GETOP           shift and go to state 52
    LETOP           shift and go to state 53
    GTOP            shift and go to state 54
    LTOP            shift and go to state 55

    logicOperator                  shift and go to state 49

state 99

    (55) callFunction -> CALL LPAR ID . RPAR

    RPAR            shift and go to state 126


state 100

    (56) valuesFunction -> VALUES LPAR ID . COMMA value RPAR
    (57) valuesFunction -> VALUES LPAR ID . COMMA alterFunction RPAR
    (58) valuesFunction -> VALUES LPAR ID . COMMA returnBoolFunction RPAR
    (59) valuesFunction -> VALUES LPAR ID . COMMA ID RPAR

    COMMA           shift and go to state 127


state 101

    (65) printFunction -> PRINTVALUES LPAR ID . consolePrint RPAR
    (88) consolePrint -> . COMMA ID consolePrint
    (89) consolePrint -> . COMMA TEXT consolePrint
    (90) consolePrint -> . empty
    (95) empty -> .

    COMMA           shift and go to state 129
    RPAR            reduce using rule 95 (empty -> .)

    consolePrint                   shift and go to state 128
    empty                          shift and go to state 130

state 102

    (66) printFunction -> PRINTVALUES LPAR TEXT . consolePrint RPAR
    (88) consolePrint -> . COMMA ID consolePrint
    (89) consolePrint -> . COMMA TEXT consolePrint
    (90) consolePrint -> . empty
    (95) empty -> .

    COMMA           shift and go to state 129
    RPAR            reduce using rule 95 (empty -> .)

    consolePrint                   shift and go to state 131
    empty                          shift and go to state 130

state 103

    (77) repeatFunction -> REPEAT LPAR insideInstruction . BREAK SEMMICOLOM insideInstruction RPAR

    BREAK           shift and go to state 132


state 104

    (12) insideInstruction -> attribute . SEMMICOLOM insideInstruction

    SEMMICOLOM      shift and go to state 133


state 105

    (13) insideInstruction -> innerFunction . SEMMICOLOM insideInstruction

    SEMMICOLOM      shift and go to state 134


state 106

    (14) insideInstruction -> empty .

    BREAK           reduce using rule 14 (insideInstruction -> empty .)
    RPAR            reduce using rule 14 (insideInstruction -> empty .)


state 107

    (78) untilFunction -> UNTIL instructionBlock BOOLVALUE .

    SEMMICOLOM      reduce using rule 78 (untilFunction -> UNTIL instructionBlock BOOLVALUE .)


state 108

    (79) untilFunction -> UNTIL instructionBlock returnBoolFunction .

    SEMMICOLOM      reduce using rule 79 (untilFunction -> UNTIL instructionBlock returnBoolFunction .)


state 109

    (80) untilFunction -> UNTIL instructionBlock ID .
    (52) numericalConditionFunction -> ID . logicOperator NUMVALUE
    (53) numericalConditionFunction -> ID . logicOperator alterFunction
    (54) numericalConditionFunction -> ID . logicOperator ID
    (71) logicOperator -> . EEOP
    (72) logicOperator -> . NEOP
    (73) logicOperator -> . GETOP
    (74) logicOperator -> . LETOP
    (75) logicOperator -> . GTOP
    (76) logicOperator -> . LTOP

    SEMMICOLOM      reduce using rule 80 (untilFunction -> UNTIL instructionBlock ID .)
    EEOP            shift and go to state 50
    NEOP            shift and go to state 51
    GETOP           shift and go to state 52
    LETOP           shift and go to state 53
    GTOP            shift and go to state 54
    LTOP            shift and go to state 55

    logicOperator                  shift and go to state 49

state 110

    (5) instructionBlock -> LPAR insideInstruction . RPAR

    RPAR            shift and go to state 135


state 111

    (81) whileFunction -> WHILE BOOLVALUE instructionBlock .

    SEMMICOLOM      reduce using rule 81 (whileFunction -> WHILE BOOLVALUE instructionBlock .)


state 112

    (82) whileFunction -> WHILE returnBoolFunction instructionBlock .

    SEMMICOLOM      reduce using rule 82 (whileFunction -> WHILE returnBoolFunction instructionBlock .)


state 113

    (83) whileFunction -> WHILE ID instructionBlock .

    SEMMICOLOM      reduce using rule 83 (whileFunction -> WHILE ID instructionBlock .)


state 114

    (84) casewhenFunction -> CASEWHEN LPAR BOOLVALUE . RPAR THEN instructionBlock elseExpression

    RPAR            shift and go to state 136


state 115

    (85) casewhenFunction -> CASEWHEN LPAR returnBoolFunction . RPAR THEN instructionBlock elseExpression

    RPAR            shift and go to state 137


state 116

    (86) casewhenFunction -> CASEWHEN LPAR ID . RPAR THEN instructionBlock elseExpression
    (52) numericalConditionFunction -> ID . logicOperator NUMVALUE
    (53) numericalConditionFunction -> ID . logicOperator alterFunction
    (54) numericalConditionFunction -> ID . logicOperator ID
    (71) logicOperator -> . EEOP
    (72) logicOperator -> . NEOP
    (73) logicOperator -> . GETOP
    (74) logicOperator -> . LETOP
    (75) logicOperator -> . GTOP
    (76) logicOperator -> . LTOP

    RPAR            shift and go to state 138
    EEOP            shift and go to state 50
    NEOP            shift and go to state 51
    GETOP           shift and go to state 52
    LETOP           shift and go to state 53
    GTOP            shift and go to state 54
    LTOP            shift and go to state 55

    logicOperator                  shift and go to state 49

state 117

    (87) caseFunction -> CASE ID WHEN . value THEN instructionBlock whenExpression elseExpression
    (17) value -> . NUMVALUE
    (18) value -> . BOOLVALUE

    NUMVALUE        shift and go to state 140
    BOOLVALUE       shift and go to state 141

    value                          shift and go to state 139

state 118

    (1) program -> COMMENT outsideInstruction PPROC instructionBlock SEMMICOLOM . outsideInstruction
    (2) outsideInstruction -> . attribute SEMMICOLOM outsideInstruction
    (3) outsideInstruction -> . function SEMMICOLOM outsideInstruction
    (4) outsideInstruction -> . empty
    (6) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (7) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (8) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (9) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (10) function -> . PROC ID instructionBlock
    (11) function -> . innerFunction
    (95) empty -> .
    (19) innerFunction -> . languageFunction
    (20) innerFunction -> . tagadaFunction
    (21) languageFunction -> . alterFunction
    (22) languageFunction -> . returnBoolFunction
    (23) languageFunction -> . voidFunction
    (24) tagadaFunction -> . MOVERIGHT
    (25) tagadaFunction -> . MOVELEFT
    (26) tagadaFunction -> . STOP
    (27) tagadaFunction -> . hammerFunction
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (30) returnBoolFunction -> . alterbFunction
    (31) returnBoolFunction -> . istrueFunction
    (32) returnBoolFunction -> . numericalConditionFunction
    (33) voidFunction -> . callFunction
    (34) voidFunction -> . valuesFunction
    (35) voidFunction -> . iterativeFunction
    (36) voidFunction -> . printFunction
    (37) hammerFunction -> . HAMMER LPAR direction RPAR
    (42) alterbFunction -> . ALTERB LPAR ID RPAR
    (43) istrueFunction -> . ISTRUE LPAR BOOLVALUE RPAR
    (44) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (45) istrueFunction -> . ISTRUE LPAR ID RPAR
    (46) numericalConditionFunction -> . NUMVALUE logicOperator NUMVALUE
    (47) numericalConditionFunction -> . NUMVALUE logicOperator alterFunction
    (48) numericalConditionFunction -> . NUMVALUE logicOperator ID
    (49) numericalConditionFunction -> . alterFunction logicOperator NUMVALUE
    (50) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (51) numericalConditionFunction -> . alterFunction logicOperator ID
    (52) numericalConditionFunction -> . ID logicOperator NUMVALUE
    (53) numericalConditionFunction -> . ID logicOperator alterFunction
    (54) numericalConditionFunction -> . ID logicOperator ID
    (55) callFunction -> . CALL LPAR ID RPAR
    (56) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (57) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (58) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (59) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (60) iterativeFunction -> . repeatFunction
    (61) iterativeFunction -> . untilFunction
    (62) iterativeFunction -> . whileFunction
    (63) iterativeFunction -> . casewhenFunction
    (64) iterativeFunction -> . caseFunction
    (65) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (66) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (77) repeatFunction -> . REPEAT LPAR insideInstruction BREAK SEMMICOLOM insideInstruction RPAR
    (78) untilFunction -> . UNTIL instructionBlock BOOLVALUE
    (79) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (80) untilFunction -> . UNTIL instructionBlock ID
    (81) whileFunction -> . WHILE BOOLVALUE instructionBlock
    (82) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (83) whileFunction -> . WHILE ID instructionBlock
    (84) casewhenFunction -> . CASEWHEN LPAR BOOLVALUE RPAR THEN instructionBlock elseExpression
    (85) casewhenFunction -> . CASEWHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (86) casewhenFunction -> . CASEWHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (87) caseFunction -> . CASE ID WHEN value THEN instructionBlock whenExpression elseExpression

    NEW             shift and go to state 7
    PROC            shift and go to state 11
    $end            reduce using rule 95 (empty -> .)
    MOVERIGHT       shift and go to state 16
    MOVELEFT        shift and go to state 17
    STOP            shift and go to state 18
    ALTER           shift and go to state 20
    HAMMER          shift and go to state 29
    ALTERB          shift and go to state 30
    ISTRUE          shift and go to state 31
    NUMVALUE        shift and go to state 21
    ID              shift and go to state 8
    CALL            shift and go to state 32
    VALUES          shift and go to state 33
    PRINTVALUES     shift and go to state 39
    REPEAT          shift and go to state 40
    UNTIL           shift and go to state 41
    WHILE           shift and go to state 42
    CASEWHEN        shift and go to state 43
    CASE            shift and go to state 44

    outsideInstruction             shift and go to state 142
    attribute                      shift and go to state 4
    function                       shift and go to state 5
    empty                          shift and go to state 6
    alterFunction                  shift and go to state 9
    returnBoolFunction             shift and go to state 10
    innerFunction                  shift and go to state 12
    languageFunction               shift and go to state 13
    tagadaFunction                 shift and go to state 14
    voidFunction                   shift and go to state 15
    hammerFunction                 shift and go to state 19
    alterbFunction                 shift and go to state 22
    istrueFunction                 shift and go to state 23
    numericalConditionFunction     shift and go to state 24
    callFunction                   shift and go to state 25
    valuesFunction                 shift and go to state 26
    iterativeFunction              shift and go to state 27
    printFunction                  shift and go to state 28
    repeatFunction                 shift and go to state 34
    untilFunction                  shift and go to state 35
    whileFunction                  shift and go to state 36
    casewhenFunction               shift and go to state 37
    caseFunction                   shift and go to state 38

state 119

    (6) attribute -> NEW ID COMMA LPAR . datatype COMMA value RPAR
    (7) attribute -> NEW ID COMMA LPAR . datatype COMMA alterFunction RPAR
    (8) attribute -> NEW ID COMMA LPAR . datatype COMMA returnBoolFunction RPAR
    (9) attribute -> NEW ID COMMA LPAR . datatype COMMA ID RPAR
    (15) datatype -> . NUMDT
    (16) datatype -> . BOOLDT

    NUMDT           shift and go to state 144
    BOOLDT          shift and go to state 145

    datatype                       shift and go to state 143

state 120

    (28) alterFunction -> ALTER LPAR ID COMMA . numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> ALTER LPAR ID COMMA . numericalOperator COMMA ID RPAR
    (38) numericalOperator -> . ADDOP
    (39) numericalOperator -> . SUBOP
    (40) numericalOperator -> . MULOP
    (41) numericalOperator -> . DIVOP

    ADDOP           shift and go to state 147
    SUBOP           shift and go to state 148
    MULOP           shift and go to state 149
    DIVOP           shift and go to state 150

    numericalOperator              shift and go to state 146

state 121

    (37) hammerFunction -> HAMMER LPAR direction RPAR .

    SEMMICOLOM      reduce using rule 37 (hammerFunction -> HAMMER LPAR direction RPAR .)


state 122

    (42) alterbFunction -> ALTERB LPAR ID RPAR .

    SEMMICOLOM      reduce using rule 42 (alterbFunction -> ALTERB LPAR ID RPAR .)
    LPAR            reduce using rule 42 (alterbFunction -> ALTERB LPAR ID RPAR .)
    RPAR            reduce using rule 42 (alterbFunction -> ALTERB LPAR ID RPAR .)


state 123

    (43) istrueFunction -> ISTRUE LPAR BOOLVALUE RPAR .

    SEMMICOLOM      reduce using rule 43 (istrueFunction -> ISTRUE LPAR BOOLVALUE RPAR .)
    LPAR            reduce using rule 43 (istrueFunction -> ISTRUE LPAR BOOLVALUE RPAR .)
    RPAR            reduce using rule 43 (istrueFunction -> ISTRUE LPAR BOOLVALUE RPAR .)


state 124

    (44) istrueFunction -> ISTRUE LPAR returnBoolFunction RPAR .

    SEMMICOLOM      reduce using rule 44 (istrueFunction -> ISTRUE LPAR returnBoolFunction RPAR .)
    LPAR            reduce using rule 44 (istrueFunction -> ISTRUE LPAR returnBoolFunction RPAR .)
    RPAR            reduce using rule 44 (istrueFunction -> ISTRUE LPAR returnBoolFunction RPAR .)


state 125

    (45) istrueFunction -> ISTRUE LPAR ID RPAR .

    SEMMICOLOM      reduce using rule 45 (istrueFunction -> ISTRUE LPAR ID RPAR .)
    LPAR            reduce using rule 45 (istrueFunction -> ISTRUE LPAR ID RPAR .)
    RPAR            reduce using rule 45 (istrueFunction -> ISTRUE LPAR ID RPAR .)


state 126

    (55) callFunction -> CALL LPAR ID RPAR .

    SEMMICOLOM      reduce using rule 55 (callFunction -> CALL LPAR ID RPAR .)


state 127

    (56) valuesFunction -> VALUES LPAR ID COMMA . value RPAR
    (57) valuesFunction -> VALUES LPAR ID COMMA . alterFunction RPAR
    (58) valuesFunction -> VALUES LPAR ID COMMA . returnBoolFunction RPAR
    (59) valuesFunction -> VALUES LPAR ID COMMA . ID RPAR
    (17) value -> . NUMVALUE
    (18) value -> . BOOLVALUE
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (30) returnBoolFunction -> . alterbFunction
    (31) returnBoolFunction -> . istrueFunction
    (32) returnBoolFunction -> . numericalConditionFunction
    (42) alterbFunction -> . ALTERB LPAR ID RPAR
    (43) istrueFunction -> . ISTRUE LPAR BOOLVALUE RPAR
    (44) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (45) istrueFunction -> . ISTRUE LPAR ID RPAR
    (46) numericalConditionFunction -> . NUMVALUE logicOperator NUMVALUE
    (47) numericalConditionFunction -> . NUMVALUE logicOperator alterFunction
    (48) numericalConditionFunction -> . NUMVALUE logicOperator ID
    (49) numericalConditionFunction -> . alterFunction logicOperator NUMVALUE
    (50) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (51) numericalConditionFunction -> . alterFunction logicOperator ID
    (52) numericalConditionFunction -> . ID logicOperator NUMVALUE
    (53) numericalConditionFunction -> . ID logicOperator alterFunction
    (54) numericalConditionFunction -> . ID logicOperator ID

    ID              shift and go to state 151
    NUMVALUE        shift and go to state 155
    BOOLVALUE       shift and go to state 141
    ALTER           shift and go to state 20
    ALTERB          shift and go to state 30
    ISTRUE          shift and go to state 31

    value                          shift and go to state 152
    alterFunction                  shift and go to state 153
    returnBoolFunction             shift and go to state 154
    alterbFunction                 shift and go to state 22
    istrueFunction                 shift and go to state 23
    numericalConditionFunction     shift and go to state 24

state 128

    (65) printFunction -> PRINTVALUES LPAR ID consolePrint . RPAR

    RPAR            shift and go to state 156


state 129

    (88) consolePrint -> COMMA . ID consolePrint
    (89) consolePrint -> COMMA . TEXT consolePrint

    ID              shift and go to state 157
    TEXT            shift and go to state 158


state 130

    (90) consolePrint -> empty .

    RPAR            reduce using rule 90 (consolePrint -> empty .)


state 131

    (66) printFunction -> PRINTVALUES LPAR TEXT consolePrint . RPAR

    RPAR            shift and go to state 159


state 132

    (77) repeatFunction -> REPEAT LPAR insideInstruction BREAK . SEMMICOLOM insideInstruction RPAR

    SEMMICOLOM      shift and go to state 160


state 133

    (12) insideInstruction -> attribute SEMMICOLOM . insideInstruction
    (12) insideInstruction -> . attribute SEMMICOLOM insideInstruction
    (13) insideInstruction -> . innerFunction SEMMICOLOM insideInstruction
    (14) insideInstruction -> . empty
    (6) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (7) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (8) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (9) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (19) innerFunction -> . languageFunction
    (20) innerFunction -> . tagadaFunction
    (95) empty -> .
    (21) languageFunction -> . alterFunction
    (22) languageFunction -> . returnBoolFunction
    (23) languageFunction -> . voidFunction
    (24) tagadaFunction -> . MOVERIGHT
    (25) tagadaFunction -> . MOVELEFT
    (26) tagadaFunction -> . STOP
    (27) tagadaFunction -> . hammerFunction
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (30) returnBoolFunction -> . alterbFunction
    (31) returnBoolFunction -> . istrueFunction
    (32) returnBoolFunction -> . numericalConditionFunction
    (33) voidFunction -> . callFunction
    (34) voidFunction -> . valuesFunction
    (35) voidFunction -> . iterativeFunction
    (36) voidFunction -> . printFunction
    (37) hammerFunction -> . HAMMER LPAR direction RPAR
    (42) alterbFunction -> . ALTERB LPAR ID RPAR
    (43) istrueFunction -> . ISTRUE LPAR BOOLVALUE RPAR
    (44) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (45) istrueFunction -> . ISTRUE LPAR ID RPAR
    (46) numericalConditionFunction -> . NUMVALUE logicOperator NUMVALUE
    (47) numericalConditionFunction -> . NUMVALUE logicOperator alterFunction
    (48) numericalConditionFunction -> . NUMVALUE logicOperator ID
    (49) numericalConditionFunction -> . alterFunction logicOperator NUMVALUE
    (50) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (51) numericalConditionFunction -> . alterFunction logicOperator ID
    (52) numericalConditionFunction -> . ID logicOperator NUMVALUE
    (53) numericalConditionFunction -> . ID logicOperator alterFunction
    (54) numericalConditionFunction -> . ID logicOperator ID
    (55) callFunction -> . CALL LPAR ID RPAR
    (56) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (57) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (58) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (59) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (60) iterativeFunction -> . repeatFunction
    (61) iterativeFunction -> . untilFunction
    (62) iterativeFunction -> . whileFunction
    (63) iterativeFunction -> . casewhenFunction
    (64) iterativeFunction -> . caseFunction
    (65) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (66) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (77) repeatFunction -> . REPEAT LPAR insideInstruction BREAK SEMMICOLOM insideInstruction RPAR
    (78) untilFunction -> . UNTIL instructionBlock BOOLVALUE
    (79) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (80) untilFunction -> . UNTIL instructionBlock ID
    (81) whileFunction -> . WHILE BOOLVALUE instructionBlock
    (82) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (83) whileFunction -> . WHILE ID instructionBlock
    (84) casewhenFunction -> . CASEWHEN LPAR BOOLVALUE RPAR THEN instructionBlock elseExpression
    (85) casewhenFunction -> . CASEWHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (86) casewhenFunction -> . CASEWHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (87) caseFunction -> . CASE ID WHEN value THEN instructionBlock whenExpression elseExpression

    NEW             shift and go to state 7
    BREAK           reduce using rule 95 (empty -> .)
    RPAR            reduce using rule 95 (empty -> .)
    MOVERIGHT       shift and go to state 16
    MOVELEFT        shift and go to state 17
    STOP            shift and go to state 18
    ALTER           shift and go to state 20
    HAMMER          shift and go to state 29
    ALTERB          shift and go to state 30
    ISTRUE          shift and go to state 31
    NUMVALUE        shift and go to state 21
    ID              shift and go to state 8
    CALL            shift and go to state 32
    VALUES          shift and go to state 33
    PRINTVALUES     shift and go to state 39
    REPEAT          shift and go to state 40
    UNTIL           shift and go to state 41
    WHILE           shift and go to state 42
    CASEWHEN        shift and go to state 43
    CASE            shift and go to state 44

    attribute                      shift and go to state 104
    insideInstruction              shift and go to state 161
    innerFunction                  shift and go to state 105
    empty                          shift and go to state 106
    alterFunction                  shift and go to state 9
    returnBoolFunction             shift and go to state 10
    languageFunction               shift and go to state 13
    tagadaFunction                 shift and go to state 14
    voidFunction                   shift and go to state 15
    hammerFunction                 shift and go to state 19
    alterbFunction                 shift and go to state 22
    istrueFunction                 shift and go to state 23
    numericalConditionFunction     shift and go to state 24
    callFunction                   shift and go to state 25
    valuesFunction                 shift and go to state 26
    iterativeFunction              shift and go to state 27
    printFunction                  shift and go to state 28
    repeatFunction                 shift and go to state 34
    untilFunction                  shift and go to state 35
    whileFunction                  shift and go to state 36
    casewhenFunction               shift and go to state 37
    caseFunction                   shift and go to state 38

state 134

    (13) insideInstruction -> innerFunction SEMMICOLOM . insideInstruction
    (12) insideInstruction -> . attribute SEMMICOLOM insideInstruction
    (13) insideInstruction -> . innerFunction SEMMICOLOM insideInstruction
    (14) insideInstruction -> . empty
    (6) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (7) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (8) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (9) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (19) innerFunction -> . languageFunction
    (20) innerFunction -> . tagadaFunction
    (95) empty -> .
    (21) languageFunction -> . alterFunction
    (22) languageFunction -> . returnBoolFunction
    (23) languageFunction -> . voidFunction
    (24) tagadaFunction -> . MOVERIGHT
    (25) tagadaFunction -> . MOVELEFT
    (26) tagadaFunction -> . STOP
    (27) tagadaFunction -> . hammerFunction
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (30) returnBoolFunction -> . alterbFunction
    (31) returnBoolFunction -> . istrueFunction
    (32) returnBoolFunction -> . numericalConditionFunction
    (33) voidFunction -> . callFunction
    (34) voidFunction -> . valuesFunction
    (35) voidFunction -> . iterativeFunction
    (36) voidFunction -> . printFunction
    (37) hammerFunction -> . HAMMER LPAR direction RPAR
    (42) alterbFunction -> . ALTERB LPAR ID RPAR
    (43) istrueFunction -> . ISTRUE LPAR BOOLVALUE RPAR
    (44) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (45) istrueFunction -> . ISTRUE LPAR ID RPAR
    (46) numericalConditionFunction -> . NUMVALUE logicOperator NUMVALUE
    (47) numericalConditionFunction -> . NUMVALUE logicOperator alterFunction
    (48) numericalConditionFunction -> . NUMVALUE logicOperator ID
    (49) numericalConditionFunction -> . alterFunction logicOperator NUMVALUE
    (50) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (51) numericalConditionFunction -> . alterFunction logicOperator ID
    (52) numericalConditionFunction -> . ID logicOperator NUMVALUE
    (53) numericalConditionFunction -> . ID logicOperator alterFunction
    (54) numericalConditionFunction -> . ID logicOperator ID
    (55) callFunction -> . CALL LPAR ID RPAR
    (56) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (57) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (58) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (59) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (60) iterativeFunction -> . repeatFunction
    (61) iterativeFunction -> . untilFunction
    (62) iterativeFunction -> . whileFunction
    (63) iterativeFunction -> . casewhenFunction
    (64) iterativeFunction -> . caseFunction
    (65) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (66) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (77) repeatFunction -> . REPEAT LPAR insideInstruction BREAK SEMMICOLOM insideInstruction RPAR
    (78) untilFunction -> . UNTIL instructionBlock BOOLVALUE
    (79) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (80) untilFunction -> . UNTIL instructionBlock ID
    (81) whileFunction -> . WHILE BOOLVALUE instructionBlock
    (82) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (83) whileFunction -> . WHILE ID instructionBlock
    (84) casewhenFunction -> . CASEWHEN LPAR BOOLVALUE RPAR THEN instructionBlock elseExpression
    (85) casewhenFunction -> . CASEWHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (86) casewhenFunction -> . CASEWHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (87) caseFunction -> . CASE ID WHEN value THEN instructionBlock whenExpression elseExpression

    NEW             shift and go to state 7
    BREAK           reduce using rule 95 (empty -> .)
    RPAR            reduce using rule 95 (empty -> .)
    MOVERIGHT       shift and go to state 16
    MOVELEFT        shift and go to state 17
    STOP            shift and go to state 18
    ALTER           shift and go to state 20
    HAMMER          shift and go to state 29
    ALTERB          shift and go to state 30
    ISTRUE          shift and go to state 31
    NUMVALUE        shift and go to state 21
    ID              shift and go to state 8
    CALL            shift and go to state 32
    VALUES          shift and go to state 33
    PRINTVALUES     shift and go to state 39
    REPEAT          shift and go to state 40
    UNTIL           shift and go to state 41
    WHILE           shift and go to state 42
    CASEWHEN        shift and go to state 43
    CASE            shift and go to state 44

    innerFunction                  shift and go to state 105
    insideInstruction              shift and go to state 162
    attribute                      shift and go to state 104
    empty                          shift and go to state 106
    alterFunction                  shift and go to state 9
    returnBoolFunction             shift and go to state 10
    languageFunction               shift and go to state 13
    tagadaFunction                 shift and go to state 14
    voidFunction                   shift and go to state 15
    hammerFunction                 shift and go to state 19
    alterbFunction                 shift and go to state 22
    istrueFunction                 shift and go to state 23
    numericalConditionFunction     shift and go to state 24
    callFunction                   shift and go to state 25
    valuesFunction                 shift and go to state 26
    iterativeFunction              shift and go to state 27
    printFunction                  shift and go to state 28
    repeatFunction                 shift and go to state 34
    untilFunction                  shift and go to state 35
    whileFunction                  shift and go to state 36
    casewhenFunction               shift and go to state 37
    caseFunction                   shift and go to state 38

state 135

    (5) instructionBlock -> LPAR insideInstruction RPAR .

    BOOLVALUE       reduce using rule 5 (instructionBlock -> LPAR insideInstruction RPAR .)
    ID              reduce using rule 5 (instructionBlock -> LPAR insideInstruction RPAR .)
    ALTERB          reduce using rule 5 (instructionBlock -> LPAR insideInstruction RPAR .)
    ISTRUE          reduce using rule 5 (instructionBlock -> LPAR insideInstruction RPAR .)
    NUMVALUE        reduce using rule 5 (instructionBlock -> LPAR insideInstruction RPAR .)
    ALTER           reduce using rule 5 (instructionBlock -> LPAR insideInstruction RPAR .)
    SEMMICOLOM      reduce using rule 5 (instructionBlock -> LPAR insideInstruction RPAR .)
    ELSE            reduce using rule 5 (instructionBlock -> LPAR insideInstruction RPAR .)
    WHEN            reduce using rule 5 (instructionBlock -> LPAR insideInstruction RPAR .)


state 136

    (84) casewhenFunction -> CASEWHEN LPAR BOOLVALUE RPAR . THEN instructionBlock elseExpression

    THEN            shift and go to state 163


state 137

    (85) casewhenFunction -> CASEWHEN LPAR returnBoolFunction RPAR . THEN instructionBlock elseExpression

    THEN            shift and go to state 164


state 138

    (86) casewhenFunction -> CASEWHEN LPAR ID RPAR . THEN instructionBlock elseExpression

    THEN            shift and go to state 165


state 139

    (87) caseFunction -> CASE ID WHEN value . THEN instructionBlock whenExpression elseExpression

    THEN            shift and go to state 166


state 140

    (17) value -> NUMVALUE .

    THEN            reduce using rule 17 (value -> NUMVALUE .)


state 141

    (18) value -> BOOLVALUE .

    THEN            reduce using rule 18 (value -> BOOLVALUE .)
    RPAR            reduce using rule 18 (value -> BOOLVALUE .)


state 142

    (1) program -> COMMENT outsideInstruction PPROC instructionBlock SEMMICOLOM outsideInstruction .

    $end            reduce using rule 1 (program -> COMMENT outsideInstruction PPROC instructionBlock SEMMICOLOM outsideInstruction .)


state 143

    (6) attribute -> NEW ID COMMA LPAR datatype . COMMA value RPAR
    (7) attribute -> NEW ID COMMA LPAR datatype . COMMA alterFunction RPAR
    (8) attribute -> NEW ID COMMA LPAR datatype . COMMA returnBoolFunction RPAR
    (9) attribute -> NEW ID COMMA LPAR datatype . COMMA ID RPAR

    COMMA           shift and go to state 167


state 144

    (15) datatype -> NUMDT .

    COMMA           reduce using rule 15 (datatype -> NUMDT .)


state 145

    (16) datatype -> BOOLDT .

    COMMA           reduce using rule 16 (datatype -> BOOLDT .)


state 146

    (28) alterFunction -> ALTER LPAR ID COMMA numericalOperator . COMMA NUMVALUE RPAR
    (29) alterFunction -> ALTER LPAR ID COMMA numericalOperator . COMMA ID RPAR

    COMMA           shift and go to state 168


state 147

    (38) numericalOperator -> ADDOP .

    COMMA           reduce using rule 38 (numericalOperator -> ADDOP .)


state 148

    (39) numericalOperator -> SUBOP .

    COMMA           reduce using rule 39 (numericalOperator -> SUBOP .)


state 149

    (40) numericalOperator -> MULOP .

    COMMA           reduce using rule 40 (numericalOperator -> MULOP .)


state 150

    (41) numericalOperator -> DIVOP .

    COMMA           reduce using rule 41 (numericalOperator -> DIVOP .)


state 151

    (59) valuesFunction -> VALUES LPAR ID COMMA ID . RPAR
    (52) numericalConditionFunction -> ID . logicOperator NUMVALUE
    (53) numericalConditionFunction -> ID . logicOperator alterFunction
    (54) numericalConditionFunction -> ID . logicOperator ID
    (71) logicOperator -> . EEOP
    (72) logicOperator -> . NEOP
    (73) logicOperator -> . GETOP
    (74) logicOperator -> . LETOP
    (75) logicOperator -> . GTOP
    (76) logicOperator -> . LTOP

    RPAR            shift and go to state 169
    EEOP            shift and go to state 50
    NEOP            shift and go to state 51
    GETOP           shift and go to state 52
    LETOP           shift and go to state 53
    GTOP            shift and go to state 54
    LTOP            shift and go to state 55

    logicOperator                  shift and go to state 49

state 152

    (56) valuesFunction -> VALUES LPAR ID COMMA value . RPAR

    RPAR            shift and go to state 170


state 153

    (57) valuesFunction -> VALUES LPAR ID COMMA alterFunction . RPAR
    (49) numericalConditionFunction -> alterFunction . logicOperator NUMVALUE
    (50) numericalConditionFunction -> alterFunction . logicOperator alterFunction
    (51) numericalConditionFunction -> alterFunction . logicOperator ID
    (71) logicOperator -> . EEOP
    (72) logicOperator -> . NEOP
    (73) logicOperator -> . GETOP
    (74) logicOperator -> . LETOP
    (75) logicOperator -> . GTOP
    (76) logicOperator -> . LTOP

    RPAR            shift and go to state 171
    EEOP            shift and go to state 50
    NEOP            shift and go to state 51
    GETOP           shift and go to state 52
    LETOP           shift and go to state 53
    GTOP            shift and go to state 54
    LTOP            shift and go to state 55

    logicOperator                  shift and go to state 56

state 154

    (58) valuesFunction -> VALUES LPAR ID COMMA returnBoolFunction . RPAR

    RPAR            shift and go to state 172


state 155

    (17) value -> NUMVALUE .
    (46) numericalConditionFunction -> NUMVALUE . logicOperator NUMVALUE
    (47) numericalConditionFunction -> NUMVALUE . logicOperator alterFunction
    (48) numericalConditionFunction -> NUMVALUE . logicOperator ID
    (71) logicOperator -> . EEOP
    (72) logicOperator -> . NEOP
    (73) logicOperator -> . GETOP
    (74) logicOperator -> . LETOP
    (75) logicOperator -> . GTOP
    (76) logicOperator -> . LTOP

    RPAR            reduce using rule 17 (value -> NUMVALUE .)
    EEOP            shift and go to state 50
    NEOP            shift and go to state 51
    GETOP           shift and go to state 52
    LETOP           shift and go to state 53
    GTOP            shift and go to state 54
    LTOP            shift and go to state 55

    logicOperator                  shift and go to state 59

state 156

    (65) printFunction -> PRINTVALUES LPAR ID consolePrint RPAR .

    SEMMICOLOM      reduce using rule 65 (printFunction -> PRINTVALUES LPAR ID consolePrint RPAR .)


state 157

    (88) consolePrint -> COMMA ID . consolePrint
    (88) consolePrint -> . COMMA ID consolePrint
    (89) consolePrint -> . COMMA TEXT consolePrint
    (90) consolePrint -> . empty
    (95) empty -> .

    COMMA           shift and go to state 129
    RPAR            reduce using rule 95 (empty -> .)

    consolePrint                   shift and go to state 173
    empty                          shift and go to state 130

state 158

    (89) consolePrint -> COMMA TEXT . consolePrint
    (88) consolePrint -> . COMMA ID consolePrint
    (89) consolePrint -> . COMMA TEXT consolePrint
    (90) consolePrint -> . empty
    (95) empty -> .

    COMMA           shift and go to state 129
    RPAR            reduce using rule 95 (empty -> .)

    consolePrint                   shift and go to state 174
    empty                          shift and go to state 130

state 159

    (66) printFunction -> PRINTVALUES LPAR TEXT consolePrint RPAR .

    SEMMICOLOM      reduce using rule 66 (printFunction -> PRINTVALUES LPAR TEXT consolePrint RPAR .)


state 160

    (77) repeatFunction -> REPEAT LPAR insideInstruction BREAK SEMMICOLOM . insideInstruction RPAR
    (12) insideInstruction -> . attribute SEMMICOLOM insideInstruction
    (13) insideInstruction -> . innerFunction SEMMICOLOM insideInstruction
    (14) insideInstruction -> . empty
    (6) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (7) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (8) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (9) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (19) innerFunction -> . languageFunction
    (20) innerFunction -> . tagadaFunction
    (95) empty -> .
    (21) languageFunction -> . alterFunction
    (22) languageFunction -> . returnBoolFunction
    (23) languageFunction -> . voidFunction
    (24) tagadaFunction -> . MOVERIGHT
    (25) tagadaFunction -> . MOVELEFT
    (26) tagadaFunction -> . STOP
    (27) tagadaFunction -> . hammerFunction
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (30) returnBoolFunction -> . alterbFunction
    (31) returnBoolFunction -> . istrueFunction
    (32) returnBoolFunction -> . numericalConditionFunction
    (33) voidFunction -> . callFunction
    (34) voidFunction -> . valuesFunction
    (35) voidFunction -> . iterativeFunction
    (36) voidFunction -> . printFunction
    (37) hammerFunction -> . HAMMER LPAR direction RPAR
    (42) alterbFunction -> . ALTERB LPAR ID RPAR
    (43) istrueFunction -> . ISTRUE LPAR BOOLVALUE RPAR
    (44) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (45) istrueFunction -> . ISTRUE LPAR ID RPAR
    (46) numericalConditionFunction -> . NUMVALUE logicOperator NUMVALUE
    (47) numericalConditionFunction -> . NUMVALUE logicOperator alterFunction
    (48) numericalConditionFunction -> . NUMVALUE logicOperator ID
    (49) numericalConditionFunction -> . alterFunction logicOperator NUMVALUE
    (50) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (51) numericalConditionFunction -> . alterFunction logicOperator ID
    (52) numericalConditionFunction -> . ID logicOperator NUMVALUE
    (53) numericalConditionFunction -> . ID logicOperator alterFunction
    (54) numericalConditionFunction -> . ID logicOperator ID
    (55) callFunction -> . CALL LPAR ID RPAR
    (56) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (57) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (58) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (59) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (60) iterativeFunction -> . repeatFunction
    (61) iterativeFunction -> . untilFunction
    (62) iterativeFunction -> . whileFunction
    (63) iterativeFunction -> . casewhenFunction
    (64) iterativeFunction -> . caseFunction
    (65) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (66) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (77) repeatFunction -> . REPEAT LPAR insideInstruction BREAK SEMMICOLOM insideInstruction RPAR
    (78) untilFunction -> . UNTIL instructionBlock BOOLVALUE
    (79) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (80) untilFunction -> . UNTIL instructionBlock ID
    (81) whileFunction -> . WHILE BOOLVALUE instructionBlock
    (82) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (83) whileFunction -> . WHILE ID instructionBlock
    (84) casewhenFunction -> . CASEWHEN LPAR BOOLVALUE RPAR THEN instructionBlock elseExpression
    (85) casewhenFunction -> . CASEWHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (86) casewhenFunction -> . CASEWHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (87) caseFunction -> . CASE ID WHEN value THEN instructionBlock whenExpression elseExpression

    NEW             shift and go to state 7
    RPAR            reduce using rule 95 (empty -> .)
    MOVERIGHT       shift and go to state 16
    MOVELEFT        shift and go to state 17
    STOP            shift and go to state 18
    ALTER           shift and go to state 20
    HAMMER          shift and go to state 29
    ALTERB          shift and go to state 30
    ISTRUE          shift and go to state 31
    NUMVALUE        shift and go to state 21
    ID              shift and go to state 8
    CALL            shift and go to state 32
    VALUES          shift and go to state 33
    PRINTVALUES     shift and go to state 39
    REPEAT          shift and go to state 40
    UNTIL           shift and go to state 41
    WHILE           shift and go to state 42
    CASEWHEN        shift and go to state 43
    CASE            shift and go to state 44

    insideInstruction              shift and go to state 175
    attribute                      shift and go to state 104
    innerFunction                  shift and go to state 105
    empty                          shift and go to state 106
    alterFunction                  shift and go to state 9
    returnBoolFunction             shift and go to state 10
    languageFunction               shift and go to state 13
    tagadaFunction                 shift and go to state 14
    voidFunction                   shift and go to state 15
    hammerFunction                 shift and go to state 19
    alterbFunction                 shift and go to state 22
    istrueFunction                 shift and go to state 23
    numericalConditionFunction     shift and go to state 24
    callFunction                   shift and go to state 25
    valuesFunction                 shift and go to state 26
    iterativeFunction              shift and go to state 27
    printFunction                  shift and go to state 28
    repeatFunction                 shift and go to state 34
    untilFunction                  shift and go to state 35
    whileFunction                  shift and go to state 36
    casewhenFunction               shift and go to state 37
    caseFunction                   shift and go to state 38

state 161

    (12) insideInstruction -> attribute SEMMICOLOM insideInstruction .

    BREAK           reduce using rule 12 (insideInstruction -> attribute SEMMICOLOM insideInstruction .)
    RPAR            reduce using rule 12 (insideInstruction -> attribute SEMMICOLOM insideInstruction .)


state 162

    (13) insideInstruction -> innerFunction SEMMICOLOM insideInstruction .

    BREAK           reduce using rule 13 (insideInstruction -> innerFunction SEMMICOLOM insideInstruction .)
    RPAR            reduce using rule 13 (insideInstruction -> innerFunction SEMMICOLOM insideInstruction .)


state 163

    (84) casewhenFunction -> CASEWHEN LPAR BOOLVALUE RPAR THEN . instructionBlock elseExpression
    (5) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 68

    instructionBlock               shift and go to state 176

state 164

    (85) casewhenFunction -> CASEWHEN LPAR returnBoolFunction RPAR THEN . instructionBlock elseExpression
    (5) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 68

    instructionBlock               shift and go to state 177

state 165

    (86) casewhenFunction -> CASEWHEN LPAR ID RPAR THEN . instructionBlock elseExpression
    (5) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 68

    instructionBlock               shift and go to state 178

state 166

    (87) caseFunction -> CASE ID WHEN value THEN . instructionBlock whenExpression elseExpression
    (5) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 68

    instructionBlock               shift and go to state 179

state 167

    (6) attribute -> NEW ID COMMA LPAR datatype COMMA . value RPAR
    (7) attribute -> NEW ID COMMA LPAR datatype COMMA . alterFunction RPAR
    (8) attribute -> NEW ID COMMA LPAR datatype COMMA . returnBoolFunction RPAR
    (9) attribute -> NEW ID COMMA LPAR datatype COMMA . ID RPAR
    (17) value -> . NUMVALUE
    (18) value -> . BOOLVALUE
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR
    (29) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (30) returnBoolFunction -> . alterbFunction
    (31) returnBoolFunction -> . istrueFunction
    (32) returnBoolFunction -> . numericalConditionFunction
    (42) alterbFunction -> . ALTERB LPAR ID RPAR
    (43) istrueFunction -> . ISTRUE LPAR BOOLVALUE RPAR
    (44) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (45) istrueFunction -> . ISTRUE LPAR ID RPAR
    (46) numericalConditionFunction -> . NUMVALUE logicOperator NUMVALUE
    (47) numericalConditionFunction -> . NUMVALUE logicOperator alterFunction
    (48) numericalConditionFunction -> . NUMVALUE logicOperator ID
    (49) numericalConditionFunction -> . alterFunction logicOperator NUMVALUE
    (50) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (51) numericalConditionFunction -> . alterFunction logicOperator ID
    (52) numericalConditionFunction -> . ID logicOperator NUMVALUE
    (53) numericalConditionFunction -> . ID logicOperator alterFunction
    (54) numericalConditionFunction -> . ID logicOperator ID

    ID              shift and go to state 180
    NUMVALUE        shift and go to state 155
    BOOLVALUE       shift and go to state 141
    ALTER           shift and go to state 20
    ALTERB          shift and go to state 30
    ISTRUE          shift and go to state 31

    value                          shift and go to state 181
    alterFunction                  shift and go to state 182
    returnBoolFunction             shift and go to state 183
    alterbFunction                 shift and go to state 22
    istrueFunction                 shift and go to state 23
    numericalConditionFunction     shift and go to state 24

state 168

    (28) alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA . NUMVALUE RPAR
    (29) alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA . ID RPAR

    NUMVALUE        shift and go to state 185
    ID              shift and go to state 184


state 169

    (59) valuesFunction -> VALUES LPAR ID COMMA ID RPAR .

    SEMMICOLOM      reduce using rule 59 (valuesFunction -> VALUES LPAR ID COMMA ID RPAR .)


state 170

    (56) valuesFunction -> VALUES LPAR ID COMMA value RPAR .

    SEMMICOLOM      reduce using rule 56 (valuesFunction -> VALUES LPAR ID COMMA value RPAR .)


state 171

    (57) valuesFunction -> VALUES LPAR ID COMMA alterFunction RPAR .

    SEMMICOLOM      reduce using rule 57 (valuesFunction -> VALUES LPAR ID COMMA alterFunction RPAR .)


state 172

    (58) valuesFunction -> VALUES LPAR ID COMMA returnBoolFunction RPAR .

    SEMMICOLOM      reduce using rule 58 (valuesFunction -> VALUES LPAR ID COMMA returnBoolFunction RPAR .)


state 173

    (88) consolePrint -> COMMA ID consolePrint .

    RPAR            reduce using rule 88 (consolePrint -> COMMA ID consolePrint .)


state 174

    (89) consolePrint -> COMMA TEXT consolePrint .

    RPAR            reduce using rule 89 (consolePrint -> COMMA TEXT consolePrint .)


state 175

    (77) repeatFunction -> REPEAT LPAR insideInstruction BREAK SEMMICOLOM insideInstruction . RPAR

    RPAR            shift and go to state 186


state 176

    (84) casewhenFunction -> CASEWHEN LPAR BOOLVALUE RPAR THEN instructionBlock . elseExpression
    (91) elseExpression -> . ELSE instructionBlock
    (92) elseExpression -> . empty
    (95) empty -> .

    ELSE            shift and go to state 188
    SEMMICOLOM      reduce using rule 95 (empty -> .)

    elseExpression                 shift and go to state 187
    empty                          shift and go to state 189

state 177

    (85) casewhenFunction -> CASEWHEN LPAR returnBoolFunction RPAR THEN instructionBlock . elseExpression
    (91) elseExpression -> . ELSE instructionBlock
    (92) elseExpression -> . empty
    (95) empty -> .

    ELSE            shift and go to state 188
    SEMMICOLOM      reduce using rule 95 (empty -> .)

    elseExpression                 shift and go to state 190
    empty                          shift and go to state 189

state 178

    (86) casewhenFunction -> CASEWHEN LPAR ID RPAR THEN instructionBlock . elseExpression
    (91) elseExpression -> . ELSE instructionBlock
    (92) elseExpression -> . empty
    (95) empty -> .

    ELSE            shift and go to state 188
    SEMMICOLOM      reduce using rule 95 (empty -> .)

    elseExpression                 shift and go to state 191
    empty                          shift and go to state 189

state 179

    (87) caseFunction -> CASE ID WHEN value THEN instructionBlock . whenExpression elseExpression
    (93) whenExpression -> . WHEN value THEN instructionBlock whenExpression
    (94) whenExpression -> . empty
    (95) empty -> .

    WHEN            shift and go to state 192
    ELSE            reduce using rule 95 (empty -> .)
    SEMMICOLOM      reduce using rule 95 (empty -> .)

    whenExpression                 shift and go to state 193
    empty                          shift and go to state 194

state 180

    (9) attribute -> NEW ID COMMA LPAR datatype COMMA ID . RPAR
    (52) numericalConditionFunction -> ID . logicOperator NUMVALUE
    (53) numericalConditionFunction -> ID . logicOperator alterFunction
    (54) numericalConditionFunction -> ID . logicOperator ID
    (71) logicOperator -> . EEOP
    (72) logicOperator -> . NEOP
    (73) logicOperator -> . GETOP
    (74) logicOperator -> . LETOP
    (75) logicOperator -> . GTOP
    (76) logicOperator -> . LTOP

    RPAR            shift and go to state 195
    EEOP            shift and go to state 50
    NEOP            shift and go to state 51
    GETOP           shift and go to state 52
    LETOP           shift and go to state 53
    GTOP            shift and go to state 54
    LTOP            shift and go to state 55

    logicOperator                  shift and go to state 49

state 181

    (6) attribute -> NEW ID COMMA LPAR datatype COMMA value . RPAR

    RPAR            shift and go to state 196


state 182

    (7) attribute -> NEW ID COMMA LPAR datatype COMMA alterFunction . RPAR
    (49) numericalConditionFunction -> alterFunction . logicOperator NUMVALUE
    (50) numericalConditionFunction -> alterFunction . logicOperator alterFunction
    (51) numericalConditionFunction -> alterFunction . logicOperator ID
    (71) logicOperator -> . EEOP
    (72) logicOperator -> . NEOP
    (73) logicOperator -> . GETOP
    (74) logicOperator -> . LETOP
    (75) logicOperator -> . GTOP
    (76) logicOperator -> . LTOP

    RPAR            shift and go to state 197
    EEOP            shift and go to state 50
    NEOP            shift and go to state 51
    GETOP           shift and go to state 52
    LETOP           shift and go to state 53
    GTOP            shift and go to state 54
    LTOP            shift and go to state 55

    logicOperator                  shift and go to state 56

state 183

    (8) attribute -> NEW ID COMMA LPAR datatype COMMA returnBoolFunction . RPAR

    RPAR            shift and go to state 198


state 184

    (29) alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID . RPAR

    RPAR            shift and go to state 199


state 185

    (28) alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE . RPAR

    RPAR            shift and go to state 200


state 186

    (77) repeatFunction -> REPEAT LPAR insideInstruction BREAK SEMMICOLOM insideInstruction RPAR .

    SEMMICOLOM      reduce using rule 77 (repeatFunction -> REPEAT LPAR insideInstruction BREAK SEMMICOLOM insideInstruction RPAR .)


state 187

    (84) casewhenFunction -> CASEWHEN LPAR BOOLVALUE RPAR THEN instructionBlock elseExpression .

    SEMMICOLOM      reduce using rule 84 (casewhenFunction -> CASEWHEN LPAR BOOLVALUE RPAR THEN instructionBlock elseExpression .)


state 188

    (91) elseExpression -> ELSE . instructionBlock
    (5) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 68

    instructionBlock               shift and go to state 201

state 189

    (92) elseExpression -> empty .

    SEMMICOLOM      reduce using rule 92 (elseExpression -> empty .)


state 190

    (85) casewhenFunction -> CASEWHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression .

    SEMMICOLOM      reduce using rule 85 (casewhenFunction -> CASEWHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression .)


state 191

    (86) casewhenFunction -> CASEWHEN LPAR ID RPAR THEN instructionBlock elseExpression .

    SEMMICOLOM      reduce using rule 86 (casewhenFunction -> CASEWHEN LPAR ID RPAR THEN instructionBlock elseExpression .)


state 192

    (93) whenExpression -> WHEN . value THEN instructionBlock whenExpression
    (17) value -> . NUMVALUE
    (18) value -> . BOOLVALUE

    NUMVALUE        shift and go to state 140
    BOOLVALUE       shift and go to state 141

    value                          shift and go to state 202

state 193

    (87) caseFunction -> CASE ID WHEN value THEN instructionBlock whenExpression . elseExpression
    (91) elseExpression -> . ELSE instructionBlock
    (92) elseExpression -> . empty
    (95) empty -> .

    ELSE            shift and go to state 188
    SEMMICOLOM      reduce using rule 95 (empty -> .)

    elseExpression                 shift and go to state 203
    empty                          shift and go to state 189

state 194

    (94) whenExpression -> empty .

    ELSE            reduce using rule 94 (whenExpression -> empty .)
    SEMMICOLOM      reduce using rule 94 (whenExpression -> empty .)


state 195

    (9) attribute -> NEW ID COMMA LPAR datatype COMMA ID RPAR .

    SEMMICOLOM      reduce using rule 9 (attribute -> NEW ID COMMA LPAR datatype COMMA ID RPAR .)


state 196

    (6) attribute -> NEW ID COMMA LPAR datatype COMMA value RPAR .

    SEMMICOLOM      reduce using rule 6 (attribute -> NEW ID COMMA LPAR datatype COMMA value RPAR .)


state 197

    (7) attribute -> NEW ID COMMA LPAR datatype COMMA alterFunction RPAR .

    SEMMICOLOM      reduce using rule 7 (attribute -> NEW ID COMMA LPAR datatype COMMA alterFunction RPAR .)


state 198

    (8) attribute -> NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR .

    SEMMICOLOM      reduce using rule 8 (attribute -> NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR .)


state 199

    (29) alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .

    EEOP            reduce using rule 29 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)
    NEOP            reduce using rule 29 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)
    GETOP           reduce using rule 29 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)
    LETOP           reduce using rule 29 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)
    GTOP            reduce using rule 29 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)
    LTOP            reduce using rule 29 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)
    SEMMICOLOM      reduce using rule 29 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)
    LPAR            reduce using rule 29 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)
    RPAR            reduce using rule 29 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)


state 200

    (28) alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR .

    EEOP            reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR .)
    NEOP            reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR .)
    GETOP           reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR .)
    LETOP           reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR .)
    GTOP            reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR .)
    LTOP            reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR .)
    SEMMICOLOM      reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR .)
    LPAR            reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR .)
    RPAR            reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA NUMVALUE RPAR .)


state 201

    (91) elseExpression -> ELSE instructionBlock .

    SEMMICOLOM      reduce using rule 91 (elseExpression -> ELSE instructionBlock .)


state 202

    (93) whenExpression -> WHEN value . THEN instructionBlock whenExpression

    THEN            shift and go to state 204


state 203

    (87) caseFunction -> CASE ID WHEN value THEN instructionBlock whenExpression elseExpression .

    SEMMICOLOM      reduce using rule 87 (caseFunction -> CASE ID WHEN value THEN instructionBlock whenExpression elseExpression .)


state 204

    (93) whenExpression -> WHEN value THEN . instructionBlock whenExpression
    (5) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 68

    instructionBlock               shift and go to state 205

state 205

    (93) whenExpression -> WHEN value THEN instructionBlock . whenExpression
    (93) whenExpression -> . WHEN value THEN instructionBlock whenExpression
    (94) whenExpression -> . empty
    (95) empty -> .

    WHEN            shift and go to state 192
    ELSE            reduce using rule 95 (empty -> .)
    SEMMICOLOM      reduce using rule 95 (empty -> .)

    whenExpression                 shift and go to state 206
    empty                          shift and go to state 194

state 206

    (93) whenExpression -> WHEN value THEN instructionBlock whenExpression .

    ELSE            reduce using rule 93 (whenExpression -> WHEN value THEN instructionBlock whenExpression .)
    SEMMICOLOM      reduce using rule 93 (whenExpression -> WHEN value THEN instructionBlock whenExpression .)

