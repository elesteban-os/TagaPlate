Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> COMMENT outsideInstruction principalProcedure outsideInstruction
Rule 2     outsideInstruction -> procedure SEMMICOLOM outsideInstruction
Rule 3     outsideInstruction -> function SEMMICOLOM outsideInstruction
Rule 4     outsideInstruction -> attribute SEMMICOLOM outsideInstruction
Rule 5     outsideInstruction -> empty
Rule 6     principalProcedure -> PPROC instructionBlock SEMMICOLOM
Rule 7     procedure -> PROC ID instructionBlock
Rule 8     function -> languageFunction
Rule 9     function -> tagadaFunction
Rule 10    attribute -> NEW ID COMMA LPAR datatype COMMA value RPAR
Rule 11    attribute -> NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
Rule 12    attribute -> NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
Rule 13    attribute -> NEW ID COMMA LPAR datatype COMMA ID RPAR
Rule 14    instructionBlock -> LPAR insideInstruction RPAR
Rule 15    insideInstruction -> function SEMMICOLOM insideInstruction
Rule 16    insideInstruction -> attribute SEMMICOLOM insideInstruction
Rule 17    insideInstruction -> empty
Rule 18    languageFunction -> alterFunction
Rule 19    languageFunction -> returnBoolFunction
Rule 20    languageFunction -> voidFunction
Rule 21    tagadaFunction -> movementFunction
Rule 22    tagadaFunction -> hammerFunction
Rule 23    datatype -> NUMDT
Rule 24    datatype -> BOOLDT
Rule 25    value -> NUMVALUE
Rule 26    value -> BOOLVALUE
Rule 27    alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
Rule 28    alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
Rule 29    returnBoolFunction -> alterbFunction
Rule 30    returnBoolFunction -> istrueFunction
Rule 31    returnBoolFunction -> numericalConditionFunction
Rule 32    voidFunction -> callFunction
Rule 33    voidFunction -> valuesFunction
Rule 34    voidFunction -> iterativeFunction
Rule 35    voidFunction -> breakFunction
Rule 36    voidFunction -> caseWhenFunction
Rule 37    voidFunction -> caseFunction
Rule 38    voidFunction -> printFunction
Rule 39    movementFunction -> MOVERIGHT
Rule 40    movementFunction -> MOVELEFT
Rule 41    movementFunction -> STOP
Rule 42    hammerFunction -> HAMMER LPAR direction RPAR
Rule 43    numericalOperator -> ADDOP
Rule 44    numericalOperator -> SUBOP
Rule 45    numericalOperator -> MULOP
Rule 46    numericalOperator -> DIVOP
Rule 47    alterbFunction -> ALTERB LPAR ID RPAR
Rule 48    istrueFunction -> ISTRUE LPAR value RPAR
Rule 49    istrueFunction -> ISTRUE LPAR returnBoolFunction RPAR
Rule 50    istrueFunction -> ISTRUE LPAR ID RPAR
Rule 51    numericalConditionFunction -> value logicOperator value
Rule 52    numericalConditionFunction -> value logicOperator alterFunction
Rule 53    numericalConditionFunction -> value logicOperator ID
Rule 54    numericalConditionFunction -> alterFunction logicOperator value
Rule 55    numericalConditionFunction -> alterFunction logicOperator alterFunction
Rule 56    numericalConditionFunction -> alterFunction logicOperator ID
Rule 57    numericalConditionFunction -> ID logicOperator value
Rule 58    numericalConditionFunction -> ID logicOperator alterFunction
Rule 59    numericalConditionFunction -> ID logicOperator ID
Rule 60    callFunction -> CALL LPAR ID RPAR
Rule 61    valuesFunction -> VALUES LPAR ID COMMA value RPAR
Rule 62    valuesFunction -> VALUES LPAR ID COMMA alterFunction RPAR
Rule 63    valuesFunction -> VALUES LPAR ID COMMA returnBoolFunction RPAR
Rule 64    valuesFunction -> VALUES LPAR ID COMMA ID RPAR
Rule 65    iterativeFunction -> repeatFunction
Rule 66    iterativeFunction -> untilFunction
Rule 67    iterativeFunction -> whileFunction
Rule 68    breakFunction -> BREAK
Rule 69    printFunction -> PRINTVALUES LPAR ID consolePrint RPAR
Rule 70    printFunction -> PRINTVALUES LPAR TEXT consolePrint RPAR
Rule 71    direction -> NORTH
Rule 72    direction -> SOUTH
Rule 73    direction -> EAST
Rule 74    direction -> WEST
Rule 75    logicOperator -> EEOP
Rule 76    logicOperator -> NEOP
Rule 77    logicOperator -> GETOP
Rule 78    logicOperator -> LETOP
Rule 79    logicOperator -> GTOP
Rule 80    logicOperator -> LTOP
Rule 81    repeatFunction -> REPEAT LPAR insideInstruction RPAR
Rule 82    untilFunction -> UNTIL instructionBlock value
Rule 83    untilFunction -> UNTIL instructionBlock returnBoolFunction
Rule 84    untilFunction -> UNTIL instructionBlock ID
Rule 85    whileFunction -> WHILE value instructionBlock
Rule 86    whileFunction -> WHILE returnBoolFunction instructionBlock
Rule 87    whileFunction -> WHILE ID instructionBlock
Rule 88    caseWhenFunction -> CASE WHEN LPAR value RPAR THEN instructionBlock elseExpression
Rule 89    caseWhenFunction -> CASE WHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
Rule 90    caseWhenFunction -> CASE WHEN LPAR ID RPAR THEN instructionBlock elseExpression
Rule 91    caseFunction -> CASE ID whenExpression elseExpression
Rule 92    consolePrint -> COMMA ID consolePrint
Rule 93    consolePrint -> COMMA TEXT consolePrint
Rule 94    consolePrint -> empty
Rule 95    elseExpression -> ELSE instructionBlock
Rule 96    elseExpression -> empty
Rule 97    whenExpression -> WHEN value THEN instructionBlock whenExpression
Rule 98    whenExpression -> WHEN value THEN instructionBlock
Rule 99    empty -> <empty>

Terminals, with rules where they appear

ADDOP                : 43
ALTER                : 27 28
ALTERB               : 47
BOOLDT               : 24
BOOLVALUE            : 26
BREAK                : 68
CALL                 : 60
CASE                 : 88 89 90 91
COMMA                : 10 10 11 11 12 12 13 13 27 27 28 28 61 62 63 64 92 93
COMMENT              : 1
DIVOP                : 46
EAST                 : 73
EEOP                 : 75
ELSE                 : 95
GETOP                : 77
GTOP                 : 79
HAMMER               : 42
ID                   : 7 10 11 12 13 13 27 28 28 47 50 53 56 57 58 59 59 60 61 62 63 64 64 69 84 87 90 91 92
ISTRUE               : 48 49 50
LETOP                : 78
LPAR                 : 10 11 12 13 14 27 28 42 47 48 49 50 60 61 62 63 64 69 70 81 88 89 90
LTOP                 : 80
MOVELEFT             : 40
MOVERIGHT            : 39
MULOP                : 45
NEOP                 : 76
NEW                  : 10 11 12 13
NORTH                : 71
NUMDT                : 23
NUMVALUE             : 25
PPROC                : 6
PRINTVALUES          : 69 70
PROC                 : 7
REPEAT               : 81
RPAR                 : 10 11 12 13 14 27 28 42 47 48 49 50 60 61 62 63 64 69 70 81 88 89 90
SEMMICOLOM           : 2 3 4 6 15 16
SOUTH                : 72
STOP                 : 41
SUBOP                : 44
TEXT                 : 70 93
THEN                 : 88 89 90 97 98
UNTIL                : 82 83 84
VALUES               : 61 62 63 64
WEST                 : 74
WHEN                 : 88 89 90 97 98
WHILE                : 85 86 87
error                : 

Nonterminals, with rules where they appear

alterFunction        : 11 18 52 54 55 55 56 58 62
alterbFunction       : 29
attribute            : 4 16
breakFunction        : 35
callFunction         : 32
caseFunction         : 37
caseWhenFunction     : 36
consolePrint         : 69 70 92 93
datatype             : 10 11 12 13
direction            : 42
elseExpression       : 88 89 90 91
empty                : 5 17 94 96
function             : 3 15
hammerFunction       : 22
insideInstruction    : 14 15 16 81
instructionBlock     : 6 7 82 83 84 85 86 87 88 89 90 95 97 98
istrueFunction       : 30
iterativeFunction    : 34
languageFunction     : 8
logicOperator        : 51 52 53 54 55 56 57 58 59
movementFunction     : 21
numericalConditionFunction : 31
numericalOperator    : 27 28
outsideInstruction   : 1 1 2 3 4
principalProcedure   : 1
printFunction        : 38
procedure            : 2
program              : 0
repeatFunction       : 65
returnBoolFunction   : 12 19 49 63 83 86 89
tagadaFunction       : 9
untilFunction        : 66
value                : 10 27 48 51 51 52 53 54 57 61 82 85 88 97 98
valuesFunction       : 33
voidFunction         : 20
whenExpression       : 91 97
whileFunction        : 67

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . COMMENT outsideInstruction principalProcedure outsideInstruction

    COMMENT         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> COMMENT . outsideInstruction principalProcedure outsideInstruction
    (2) outsideInstruction -> . procedure SEMMICOLOM outsideInstruction
    (3) outsideInstruction -> . function SEMMICOLOM outsideInstruction
    (4) outsideInstruction -> . attribute SEMMICOLOM outsideInstruction
    (5) outsideInstruction -> . empty
    (7) procedure -> . PROC ID instructionBlock
    (8) function -> . languageFunction
    (9) function -> . tagadaFunction
    (10) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (11) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (12) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (13) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (99) empty -> .
    (18) languageFunction -> . alterFunction
    (19) languageFunction -> . returnBoolFunction
    (20) languageFunction -> . voidFunction
    (21) tagadaFunction -> . movementFunction
    (22) tagadaFunction -> . hammerFunction
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (29) returnBoolFunction -> . alterbFunction
    (30) returnBoolFunction -> . istrueFunction
    (31) returnBoolFunction -> . numericalConditionFunction
    (32) voidFunction -> . callFunction
    (33) voidFunction -> . valuesFunction
    (34) voidFunction -> . iterativeFunction
    (35) voidFunction -> . breakFunction
    (36) voidFunction -> . caseWhenFunction
    (37) voidFunction -> . caseFunction
    (38) voidFunction -> . printFunction
    (39) movementFunction -> . MOVERIGHT
    (40) movementFunction -> . MOVELEFT
    (41) movementFunction -> . STOP
    (42) hammerFunction -> . HAMMER LPAR direction RPAR
    (47) alterbFunction -> . ALTERB LPAR ID RPAR
    (48) istrueFunction -> . ISTRUE LPAR value RPAR
    (49) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (50) istrueFunction -> . ISTRUE LPAR ID RPAR
    (51) numericalConditionFunction -> . value logicOperator value
    (52) numericalConditionFunction -> . value logicOperator alterFunction
    (53) numericalConditionFunction -> . value logicOperator ID
    (54) numericalConditionFunction -> . alterFunction logicOperator value
    (55) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (56) numericalConditionFunction -> . alterFunction logicOperator ID
    (57) numericalConditionFunction -> . ID logicOperator value
    (58) numericalConditionFunction -> . ID logicOperator alterFunction
    (59) numericalConditionFunction -> . ID logicOperator ID
    (60) callFunction -> . CALL LPAR ID RPAR
    (61) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (62) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (63) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (64) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (65) iterativeFunction -> . repeatFunction
    (66) iterativeFunction -> . untilFunction
    (67) iterativeFunction -> . whileFunction
    (68) breakFunction -> . BREAK
    (88) caseWhenFunction -> . CASE WHEN LPAR value RPAR THEN instructionBlock elseExpression
    (89) caseWhenFunction -> . CASE WHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (90) caseWhenFunction -> . CASE WHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (91) caseFunction -> . CASE ID whenExpression elseExpression
    (69) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (70) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (81) repeatFunction -> . REPEAT LPAR insideInstruction RPAR
    (82) untilFunction -> . UNTIL instructionBlock value
    (83) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (84) untilFunction -> . UNTIL instructionBlock ID
    (85) whileFunction -> . WHILE value instructionBlock
    (86) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (87) whileFunction -> . WHILE ID instructionBlock

    PROC            shift and go to state 8
    NEW             shift and go to state 12
    PPROC           reduce using rule 99 (empty -> .)
    ALTER           shift and go to state 19
    MOVERIGHT       shift and go to state 30
    MOVELEFT        shift and go to state 31
    STOP            shift and go to state 32
    HAMMER          shift and go to state 33
    ALTERB          shift and go to state 34
    ISTRUE          shift and go to state 35
    ID              shift and go to state 9
    CALL            shift and go to state 36
    VALUES          shift and go to state 37
    BREAK           shift and go to state 41
    CASE            shift and go to state 42
    PRINTVALUES     shift and go to state 43
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    REPEAT          shift and go to state 46
    UNTIL           shift and go to state 47
    WHILE           shift and go to state 48

    outsideInstruction             shift and go to state 3
    procedure                      shift and go to state 4
    function                       shift and go to state 5
    attribute                      shift and go to state 6
    empty                          shift and go to state 7
    languageFunction               shift and go to state 10
    tagadaFunction                 shift and go to state 11
    value                          shift and go to state 13
    alterFunction                  shift and go to state 14
    returnBoolFunction             shift and go to state 15
    voidFunction                   shift and go to state 16
    movementFunction               shift and go to state 17
    hammerFunction                 shift and go to state 18
    alterbFunction                 shift and go to state 20
    istrueFunction                 shift and go to state 21
    numericalConditionFunction     shift and go to state 22
    callFunction                   shift and go to state 23
    valuesFunction                 shift and go to state 24
    iterativeFunction              shift and go to state 25
    breakFunction                  shift and go to state 26
    caseWhenFunction               shift and go to state 27
    caseFunction                   shift and go to state 28
    printFunction                  shift and go to state 29
    repeatFunction                 shift and go to state 38
    untilFunction                  shift and go to state 39
    whileFunction                  shift and go to state 40

state 3

    (1) program -> COMMENT outsideInstruction . principalProcedure outsideInstruction
    (6) principalProcedure -> . PPROC instructionBlock SEMMICOLOM

    PPROC           shift and go to state 50

    principalProcedure             shift and go to state 49

state 4

    (2) outsideInstruction -> procedure . SEMMICOLOM outsideInstruction

    SEMMICOLOM      shift and go to state 51


state 5

    (3) outsideInstruction -> function . SEMMICOLOM outsideInstruction

    SEMMICOLOM      shift and go to state 52


state 6

    (4) outsideInstruction -> attribute . SEMMICOLOM outsideInstruction

    SEMMICOLOM      shift and go to state 53


state 7

    (5) outsideInstruction -> empty .

    PPROC           reduce using rule 5 (outsideInstruction -> empty .)
    $end            reduce using rule 5 (outsideInstruction -> empty .)


state 8

    (7) procedure -> PROC . ID instructionBlock

    ID              shift and go to state 54


state 9

    (57) numericalConditionFunction -> ID . logicOperator value
    (58) numericalConditionFunction -> ID . logicOperator alterFunction
    (59) numericalConditionFunction -> ID . logicOperator ID
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    logicOperator                  shift and go to state 55

state 10

    (8) function -> languageFunction .

    SEMMICOLOM      reduce using rule 8 (function -> languageFunction .)


state 11

    (9) function -> tagadaFunction .

    SEMMICOLOM      reduce using rule 9 (function -> tagadaFunction .)


state 12

    (10) attribute -> NEW . ID COMMA LPAR datatype COMMA value RPAR
    (11) attribute -> NEW . ID COMMA LPAR datatype COMMA alterFunction RPAR
    (12) attribute -> NEW . ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (13) attribute -> NEW . ID COMMA LPAR datatype COMMA ID RPAR

    ID              shift and go to state 62


state 13

    (51) numericalConditionFunction -> value . logicOperator value
    (52) numericalConditionFunction -> value . logicOperator alterFunction
    (53) numericalConditionFunction -> value . logicOperator ID
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    logicOperator                  shift and go to state 63

state 14

    (18) languageFunction -> alterFunction .
    (54) numericalConditionFunction -> alterFunction . logicOperator value
    (55) numericalConditionFunction -> alterFunction . logicOperator alterFunction
    (56) numericalConditionFunction -> alterFunction . logicOperator ID
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    SEMMICOLOM      reduce using rule 18 (languageFunction -> alterFunction .)
    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    logicOperator                  shift and go to state 64

state 15

    (19) languageFunction -> returnBoolFunction .

    SEMMICOLOM      reduce using rule 19 (languageFunction -> returnBoolFunction .)


state 16

    (20) languageFunction -> voidFunction .

    SEMMICOLOM      reduce using rule 20 (languageFunction -> voidFunction .)


state 17

    (21) tagadaFunction -> movementFunction .

    SEMMICOLOM      reduce using rule 21 (tagadaFunction -> movementFunction .)


state 18

    (22) tagadaFunction -> hammerFunction .

    SEMMICOLOM      reduce using rule 22 (tagadaFunction -> hammerFunction .)


state 19

    (27) alterFunction -> ALTER . LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> ALTER . LPAR ID COMMA numericalOperator COMMA ID RPAR

    LPAR            shift and go to state 65


state 20

    (29) returnBoolFunction -> alterbFunction .

    SEMMICOLOM      reduce using rule 29 (returnBoolFunction -> alterbFunction .)
    LPAR            reduce using rule 29 (returnBoolFunction -> alterbFunction .)
    RPAR            reduce using rule 29 (returnBoolFunction -> alterbFunction .)


state 21

    (30) returnBoolFunction -> istrueFunction .

    SEMMICOLOM      reduce using rule 30 (returnBoolFunction -> istrueFunction .)
    LPAR            reduce using rule 30 (returnBoolFunction -> istrueFunction .)
    RPAR            reduce using rule 30 (returnBoolFunction -> istrueFunction .)


state 22

    (31) returnBoolFunction -> numericalConditionFunction .

    SEMMICOLOM      reduce using rule 31 (returnBoolFunction -> numericalConditionFunction .)
    LPAR            reduce using rule 31 (returnBoolFunction -> numericalConditionFunction .)
    RPAR            reduce using rule 31 (returnBoolFunction -> numericalConditionFunction .)


state 23

    (32) voidFunction -> callFunction .

    SEMMICOLOM      reduce using rule 32 (voidFunction -> callFunction .)


state 24

    (33) voidFunction -> valuesFunction .

    SEMMICOLOM      reduce using rule 33 (voidFunction -> valuesFunction .)


state 25

    (34) voidFunction -> iterativeFunction .

    SEMMICOLOM      reduce using rule 34 (voidFunction -> iterativeFunction .)


state 26

    (35) voidFunction -> breakFunction .

    SEMMICOLOM      reduce using rule 35 (voidFunction -> breakFunction .)


state 27

    (36) voidFunction -> caseWhenFunction .

    SEMMICOLOM      reduce using rule 36 (voidFunction -> caseWhenFunction .)


state 28

    (37) voidFunction -> caseFunction .

    SEMMICOLOM      reduce using rule 37 (voidFunction -> caseFunction .)


state 29

    (38) voidFunction -> printFunction .

    SEMMICOLOM      reduce using rule 38 (voidFunction -> printFunction .)


state 30

    (39) movementFunction -> MOVERIGHT .

    SEMMICOLOM      reduce using rule 39 (movementFunction -> MOVERIGHT .)


state 31

    (40) movementFunction -> MOVELEFT .

    SEMMICOLOM      reduce using rule 40 (movementFunction -> MOVELEFT .)


state 32

    (41) movementFunction -> STOP .

    SEMMICOLOM      reduce using rule 41 (movementFunction -> STOP .)


state 33

    (42) hammerFunction -> HAMMER . LPAR direction RPAR

    LPAR            shift and go to state 66


state 34

    (47) alterbFunction -> ALTERB . LPAR ID RPAR

    LPAR            shift and go to state 67


state 35

    (48) istrueFunction -> ISTRUE . LPAR value RPAR
    (49) istrueFunction -> ISTRUE . LPAR returnBoolFunction RPAR
    (50) istrueFunction -> ISTRUE . LPAR ID RPAR

    LPAR            shift and go to state 68


state 36

    (60) callFunction -> CALL . LPAR ID RPAR

    LPAR            shift and go to state 69


state 37

    (61) valuesFunction -> VALUES . LPAR ID COMMA value RPAR
    (62) valuesFunction -> VALUES . LPAR ID COMMA alterFunction RPAR
    (63) valuesFunction -> VALUES . LPAR ID COMMA returnBoolFunction RPAR
    (64) valuesFunction -> VALUES . LPAR ID COMMA ID RPAR

    LPAR            shift and go to state 70


state 38

    (65) iterativeFunction -> repeatFunction .

    SEMMICOLOM      reduce using rule 65 (iterativeFunction -> repeatFunction .)


state 39

    (66) iterativeFunction -> untilFunction .

    SEMMICOLOM      reduce using rule 66 (iterativeFunction -> untilFunction .)


state 40

    (67) iterativeFunction -> whileFunction .

    SEMMICOLOM      reduce using rule 67 (iterativeFunction -> whileFunction .)


state 41

    (68) breakFunction -> BREAK .

    SEMMICOLOM      reduce using rule 68 (breakFunction -> BREAK .)


state 42

    (88) caseWhenFunction -> CASE . WHEN LPAR value RPAR THEN instructionBlock elseExpression
    (89) caseWhenFunction -> CASE . WHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (90) caseWhenFunction -> CASE . WHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (91) caseFunction -> CASE . ID whenExpression elseExpression

    WHEN            shift and go to state 71
    ID              shift and go to state 72


state 43

    (69) printFunction -> PRINTVALUES . LPAR ID consolePrint RPAR
    (70) printFunction -> PRINTVALUES . LPAR TEXT consolePrint RPAR

    LPAR            shift and go to state 73


state 44

    (25) value -> NUMVALUE .

    EEOP            reduce using rule 25 (value -> NUMVALUE .)
    NEOP            reduce using rule 25 (value -> NUMVALUE .)
    GETOP           reduce using rule 25 (value -> NUMVALUE .)
    LETOP           reduce using rule 25 (value -> NUMVALUE .)
    GTOP            reduce using rule 25 (value -> NUMVALUE .)
    LTOP            reduce using rule 25 (value -> NUMVALUE .)
    LPAR            reduce using rule 25 (value -> NUMVALUE .)
    SEMMICOLOM      reduce using rule 25 (value -> NUMVALUE .)
    RPAR            reduce using rule 25 (value -> NUMVALUE .)
    THEN            reduce using rule 25 (value -> NUMVALUE .)


state 45

    (26) value -> BOOLVALUE .

    EEOP            reduce using rule 26 (value -> BOOLVALUE .)
    NEOP            reduce using rule 26 (value -> BOOLVALUE .)
    GETOP           reduce using rule 26 (value -> BOOLVALUE .)
    LETOP           reduce using rule 26 (value -> BOOLVALUE .)
    GTOP            reduce using rule 26 (value -> BOOLVALUE .)
    LTOP            reduce using rule 26 (value -> BOOLVALUE .)
    LPAR            reduce using rule 26 (value -> BOOLVALUE .)
    SEMMICOLOM      reduce using rule 26 (value -> BOOLVALUE .)
    RPAR            reduce using rule 26 (value -> BOOLVALUE .)
    THEN            reduce using rule 26 (value -> BOOLVALUE .)


state 46

    (81) repeatFunction -> REPEAT . LPAR insideInstruction RPAR

    LPAR            shift and go to state 74


state 47

    (82) untilFunction -> UNTIL . instructionBlock value
    (83) untilFunction -> UNTIL . instructionBlock returnBoolFunction
    (84) untilFunction -> UNTIL . instructionBlock ID
    (14) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 76

    instructionBlock               shift and go to state 75

state 48

    (85) whileFunction -> WHILE . value instructionBlock
    (86) whileFunction -> WHILE . returnBoolFunction instructionBlock
    (87) whileFunction -> WHILE . ID instructionBlock
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (29) returnBoolFunction -> . alterbFunction
    (30) returnBoolFunction -> . istrueFunction
    (31) returnBoolFunction -> . numericalConditionFunction
    (47) alterbFunction -> . ALTERB LPAR ID RPAR
    (48) istrueFunction -> . ISTRUE LPAR value RPAR
    (49) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (50) istrueFunction -> . ISTRUE LPAR ID RPAR
    (51) numericalConditionFunction -> . value logicOperator value
    (52) numericalConditionFunction -> . value logicOperator alterFunction
    (53) numericalConditionFunction -> . value logicOperator ID
    (54) numericalConditionFunction -> . alterFunction logicOperator value
    (55) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (56) numericalConditionFunction -> . alterFunction logicOperator ID
    (57) numericalConditionFunction -> . ID logicOperator value
    (58) numericalConditionFunction -> . ID logicOperator alterFunction
    (59) numericalConditionFunction -> . ID logicOperator ID
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR

    ID              shift and go to state 79
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    ALTERB          shift and go to state 34
    ISTRUE          shift and go to state 35
    ALTER           shift and go to state 19

    value                          shift and go to state 77
    returnBoolFunction             shift and go to state 78
    alterbFunction                 shift and go to state 20
    istrueFunction                 shift and go to state 21
    numericalConditionFunction     shift and go to state 22
    alterFunction                  shift and go to state 80

state 49

    (1) program -> COMMENT outsideInstruction principalProcedure . outsideInstruction
    (2) outsideInstruction -> . procedure SEMMICOLOM outsideInstruction
    (3) outsideInstruction -> . function SEMMICOLOM outsideInstruction
    (4) outsideInstruction -> . attribute SEMMICOLOM outsideInstruction
    (5) outsideInstruction -> . empty
    (7) procedure -> . PROC ID instructionBlock
    (8) function -> . languageFunction
    (9) function -> . tagadaFunction
    (10) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (11) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (12) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (13) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (99) empty -> .
    (18) languageFunction -> . alterFunction
    (19) languageFunction -> . returnBoolFunction
    (20) languageFunction -> . voidFunction
    (21) tagadaFunction -> . movementFunction
    (22) tagadaFunction -> . hammerFunction
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (29) returnBoolFunction -> . alterbFunction
    (30) returnBoolFunction -> . istrueFunction
    (31) returnBoolFunction -> . numericalConditionFunction
    (32) voidFunction -> . callFunction
    (33) voidFunction -> . valuesFunction
    (34) voidFunction -> . iterativeFunction
    (35) voidFunction -> . breakFunction
    (36) voidFunction -> . caseWhenFunction
    (37) voidFunction -> . caseFunction
    (38) voidFunction -> . printFunction
    (39) movementFunction -> . MOVERIGHT
    (40) movementFunction -> . MOVELEFT
    (41) movementFunction -> . STOP
    (42) hammerFunction -> . HAMMER LPAR direction RPAR
    (47) alterbFunction -> . ALTERB LPAR ID RPAR
    (48) istrueFunction -> . ISTRUE LPAR value RPAR
    (49) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (50) istrueFunction -> . ISTRUE LPAR ID RPAR
    (51) numericalConditionFunction -> . value logicOperator value
    (52) numericalConditionFunction -> . value logicOperator alterFunction
    (53) numericalConditionFunction -> . value logicOperator ID
    (54) numericalConditionFunction -> . alterFunction logicOperator value
    (55) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (56) numericalConditionFunction -> . alterFunction logicOperator ID
    (57) numericalConditionFunction -> . ID logicOperator value
    (58) numericalConditionFunction -> . ID logicOperator alterFunction
    (59) numericalConditionFunction -> . ID logicOperator ID
    (60) callFunction -> . CALL LPAR ID RPAR
    (61) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (62) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (63) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (64) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (65) iterativeFunction -> . repeatFunction
    (66) iterativeFunction -> . untilFunction
    (67) iterativeFunction -> . whileFunction
    (68) breakFunction -> . BREAK
    (88) caseWhenFunction -> . CASE WHEN LPAR value RPAR THEN instructionBlock elseExpression
    (89) caseWhenFunction -> . CASE WHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (90) caseWhenFunction -> . CASE WHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (91) caseFunction -> . CASE ID whenExpression elseExpression
    (69) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (70) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (81) repeatFunction -> . REPEAT LPAR insideInstruction RPAR
    (82) untilFunction -> . UNTIL instructionBlock value
    (83) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (84) untilFunction -> . UNTIL instructionBlock ID
    (85) whileFunction -> . WHILE value instructionBlock
    (86) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (87) whileFunction -> . WHILE ID instructionBlock

    PROC            shift and go to state 8
    NEW             shift and go to state 12
    $end            reduce using rule 99 (empty -> .)
    ALTER           shift and go to state 19
    MOVERIGHT       shift and go to state 30
    MOVELEFT        shift and go to state 31
    STOP            shift and go to state 32
    HAMMER          shift and go to state 33
    ALTERB          shift and go to state 34
    ISTRUE          shift and go to state 35
    ID              shift and go to state 9
    CALL            shift and go to state 36
    VALUES          shift and go to state 37
    BREAK           shift and go to state 41
    CASE            shift and go to state 42
    PRINTVALUES     shift and go to state 43
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    REPEAT          shift and go to state 46
    UNTIL           shift and go to state 47
    WHILE           shift and go to state 48

    outsideInstruction             shift and go to state 81
    procedure                      shift and go to state 4
    function                       shift and go to state 5
    attribute                      shift and go to state 6
    empty                          shift and go to state 7
    languageFunction               shift and go to state 10
    tagadaFunction                 shift and go to state 11
    value                          shift and go to state 13
    alterFunction                  shift and go to state 14
    returnBoolFunction             shift and go to state 15
    voidFunction                   shift and go to state 16
    movementFunction               shift and go to state 17
    hammerFunction                 shift and go to state 18
    alterbFunction                 shift and go to state 20
    istrueFunction                 shift and go to state 21
    numericalConditionFunction     shift and go to state 22
    callFunction                   shift and go to state 23
    valuesFunction                 shift and go to state 24
    iterativeFunction              shift and go to state 25
    breakFunction                  shift and go to state 26
    caseWhenFunction               shift and go to state 27
    caseFunction                   shift and go to state 28
    printFunction                  shift and go to state 29
    repeatFunction                 shift and go to state 38
    untilFunction                  shift and go to state 39
    whileFunction                  shift and go to state 40

state 50

    (6) principalProcedure -> PPROC . instructionBlock SEMMICOLOM
    (14) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 76

    instructionBlock               shift and go to state 82

state 51

    (2) outsideInstruction -> procedure SEMMICOLOM . outsideInstruction
    (2) outsideInstruction -> . procedure SEMMICOLOM outsideInstruction
    (3) outsideInstruction -> . function SEMMICOLOM outsideInstruction
    (4) outsideInstruction -> . attribute SEMMICOLOM outsideInstruction
    (5) outsideInstruction -> . empty
    (7) procedure -> . PROC ID instructionBlock
    (8) function -> . languageFunction
    (9) function -> . tagadaFunction
    (10) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (11) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (12) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (13) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (99) empty -> .
    (18) languageFunction -> . alterFunction
    (19) languageFunction -> . returnBoolFunction
    (20) languageFunction -> . voidFunction
    (21) tagadaFunction -> . movementFunction
    (22) tagadaFunction -> . hammerFunction
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (29) returnBoolFunction -> . alterbFunction
    (30) returnBoolFunction -> . istrueFunction
    (31) returnBoolFunction -> . numericalConditionFunction
    (32) voidFunction -> . callFunction
    (33) voidFunction -> . valuesFunction
    (34) voidFunction -> . iterativeFunction
    (35) voidFunction -> . breakFunction
    (36) voidFunction -> . caseWhenFunction
    (37) voidFunction -> . caseFunction
    (38) voidFunction -> . printFunction
    (39) movementFunction -> . MOVERIGHT
    (40) movementFunction -> . MOVELEFT
    (41) movementFunction -> . STOP
    (42) hammerFunction -> . HAMMER LPAR direction RPAR
    (47) alterbFunction -> . ALTERB LPAR ID RPAR
    (48) istrueFunction -> . ISTRUE LPAR value RPAR
    (49) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (50) istrueFunction -> . ISTRUE LPAR ID RPAR
    (51) numericalConditionFunction -> . value logicOperator value
    (52) numericalConditionFunction -> . value logicOperator alterFunction
    (53) numericalConditionFunction -> . value logicOperator ID
    (54) numericalConditionFunction -> . alterFunction logicOperator value
    (55) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (56) numericalConditionFunction -> . alterFunction logicOperator ID
    (57) numericalConditionFunction -> . ID logicOperator value
    (58) numericalConditionFunction -> . ID logicOperator alterFunction
    (59) numericalConditionFunction -> . ID logicOperator ID
    (60) callFunction -> . CALL LPAR ID RPAR
    (61) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (62) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (63) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (64) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (65) iterativeFunction -> . repeatFunction
    (66) iterativeFunction -> . untilFunction
    (67) iterativeFunction -> . whileFunction
    (68) breakFunction -> . BREAK
    (88) caseWhenFunction -> . CASE WHEN LPAR value RPAR THEN instructionBlock elseExpression
    (89) caseWhenFunction -> . CASE WHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (90) caseWhenFunction -> . CASE WHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (91) caseFunction -> . CASE ID whenExpression elseExpression
    (69) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (70) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (81) repeatFunction -> . REPEAT LPAR insideInstruction RPAR
    (82) untilFunction -> . UNTIL instructionBlock value
    (83) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (84) untilFunction -> . UNTIL instructionBlock ID
    (85) whileFunction -> . WHILE value instructionBlock
    (86) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (87) whileFunction -> . WHILE ID instructionBlock

    PROC            shift and go to state 8
    NEW             shift and go to state 12
    PPROC           reduce using rule 99 (empty -> .)
    $end            reduce using rule 99 (empty -> .)
    ALTER           shift and go to state 19
    MOVERIGHT       shift and go to state 30
    MOVELEFT        shift and go to state 31
    STOP            shift and go to state 32
    HAMMER          shift and go to state 33
    ALTERB          shift and go to state 34
    ISTRUE          shift and go to state 35
    ID              shift and go to state 9
    CALL            shift and go to state 36
    VALUES          shift and go to state 37
    BREAK           shift and go to state 41
    CASE            shift and go to state 42
    PRINTVALUES     shift and go to state 43
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    REPEAT          shift and go to state 46
    UNTIL           shift and go to state 47
    WHILE           shift and go to state 48

    procedure                      shift and go to state 4
    outsideInstruction             shift and go to state 83
    function                       shift and go to state 5
    attribute                      shift and go to state 6
    empty                          shift and go to state 7
    languageFunction               shift and go to state 10
    tagadaFunction                 shift and go to state 11
    value                          shift and go to state 13
    alterFunction                  shift and go to state 14
    returnBoolFunction             shift and go to state 15
    voidFunction                   shift and go to state 16
    movementFunction               shift and go to state 17
    hammerFunction                 shift and go to state 18
    alterbFunction                 shift and go to state 20
    istrueFunction                 shift and go to state 21
    numericalConditionFunction     shift and go to state 22
    callFunction                   shift and go to state 23
    valuesFunction                 shift and go to state 24
    iterativeFunction              shift and go to state 25
    breakFunction                  shift and go to state 26
    caseWhenFunction               shift and go to state 27
    caseFunction                   shift and go to state 28
    printFunction                  shift and go to state 29
    repeatFunction                 shift and go to state 38
    untilFunction                  shift and go to state 39
    whileFunction                  shift and go to state 40

state 52

    (3) outsideInstruction -> function SEMMICOLOM . outsideInstruction
    (2) outsideInstruction -> . procedure SEMMICOLOM outsideInstruction
    (3) outsideInstruction -> . function SEMMICOLOM outsideInstruction
    (4) outsideInstruction -> . attribute SEMMICOLOM outsideInstruction
    (5) outsideInstruction -> . empty
    (7) procedure -> . PROC ID instructionBlock
    (8) function -> . languageFunction
    (9) function -> . tagadaFunction
    (10) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (11) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (12) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (13) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (99) empty -> .
    (18) languageFunction -> . alterFunction
    (19) languageFunction -> . returnBoolFunction
    (20) languageFunction -> . voidFunction
    (21) tagadaFunction -> . movementFunction
    (22) tagadaFunction -> . hammerFunction
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (29) returnBoolFunction -> . alterbFunction
    (30) returnBoolFunction -> . istrueFunction
    (31) returnBoolFunction -> . numericalConditionFunction
    (32) voidFunction -> . callFunction
    (33) voidFunction -> . valuesFunction
    (34) voidFunction -> . iterativeFunction
    (35) voidFunction -> . breakFunction
    (36) voidFunction -> . caseWhenFunction
    (37) voidFunction -> . caseFunction
    (38) voidFunction -> . printFunction
    (39) movementFunction -> . MOVERIGHT
    (40) movementFunction -> . MOVELEFT
    (41) movementFunction -> . STOP
    (42) hammerFunction -> . HAMMER LPAR direction RPAR
    (47) alterbFunction -> . ALTERB LPAR ID RPAR
    (48) istrueFunction -> . ISTRUE LPAR value RPAR
    (49) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (50) istrueFunction -> . ISTRUE LPAR ID RPAR
    (51) numericalConditionFunction -> . value logicOperator value
    (52) numericalConditionFunction -> . value logicOperator alterFunction
    (53) numericalConditionFunction -> . value logicOperator ID
    (54) numericalConditionFunction -> . alterFunction logicOperator value
    (55) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (56) numericalConditionFunction -> . alterFunction logicOperator ID
    (57) numericalConditionFunction -> . ID logicOperator value
    (58) numericalConditionFunction -> . ID logicOperator alterFunction
    (59) numericalConditionFunction -> . ID logicOperator ID
    (60) callFunction -> . CALL LPAR ID RPAR
    (61) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (62) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (63) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (64) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (65) iterativeFunction -> . repeatFunction
    (66) iterativeFunction -> . untilFunction
    (67) iterativeFunction -> . whileFunction
    (68) breakFunction -> . BREAK
    (88) caseWhenFunction -> . CASE WHEN LPAR value RPAR THEN instructionBlock elseExpression
    (89) caseWhenFunction -> . CASE WHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (90) caseWhenFunction -> . CASE WHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (91) caseFunction -> . CASE ID whenExpression elseExpression
    (69) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (70) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (81) repeatFunction -> . REPEAT LPAR insideInstruction RPAR
    (82) untilFunction -> . UNTIL instructionBlock value
    (83) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (84) untilFunction -> . UNTIL instructionBlock ID
    (85) whileFunction -> . WHILE value instructionBlock
    (86) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (87) whileFunction -> . WHILE ID instructionBlock

    PROC            shift and go to state 8
    NEW             shift and go to state 12
    PPROC           reduce using rule 99 (empty -> .)
    $end            reduce using rule 99 (empty -> .)
    ALTER           shift and go to state 19
    MOVERIGHT       shift and go to state 30
    MOVELEFT        shift and go to state 31
    STOP            shift and go to state 32
    HAMMER          shift and go to state 33
    ALTERB          shift and go to state 34
    ISTRUE          shift and go to state 35
    ID              shift and go to state 9
    CALL            shift and go to state 36
    VALUES          shift and go to state 37
    BREAK           shift and go to state 41
    CASE            shift and go to state 42
    PRINTVALUES     shift and go to state 43
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    REPEAT          shift and go to state 46
    UNTIL           shift and go to state 47
    WHILE           shift and go to state 48

    function                       shift and go to state 5
    outsideInstruction             shift and go to state 84
    procedure                      shift and go to state 4
    attribute                      shift and go to state 6
    empty                          shift and go to state 7
    languageFunction               shift and go to state 10
    tagadaFunction                 shift and go to state 11
    value                          shift and go to state 13
    alterFunction                  shift and go to state 14
    returnBoolFunction             shift and go to state 15
    voidFunction                   shift and go to state 16
    movementFunction               shift and go to state 17
    hammerFunction                 shift and go to state 18
    alterbFunction                 shift and go to state 20
    istrueFunction                 shift and go to state 21
    numericalConditionFunction     shift and go to state 22
    callFunction                   shift and go to state 23
    valuesFunction                 shift and go to state 24
    iterativeFunction              shift and go to state 25
    breakFunction                  shift and go to state 26
    caseWhenFunction               shift and go to state 27
    caseFunction                   shift and go to state 28
    printFunction                  shift and go to state 29
    repeatFunction                 shift and go to state 38
    untilFunction                  shift and go to state 39
    whileFunction                  shift and go to state 40

state 53

    (4) outsideInstruction -> attribute SEMMICOLOM . outsideInstruction
    (2) outsideInstruction -> . procedure SEMMICOLOM outsideInstruction
    (3) outsideInstruction -> . function SEMMICOLOM outsideInstruction
    (4) outsideInstruction -> . attribute SEMMICOLOM outsideInstruction
    (5) outsideInstruction -> . empty
    (7) procedure -> . PROC ID instructionBlock
    (8) function -> . languageFunction
    (9) function -> . tagadaFunction
    (10) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (11) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (12) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (13) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (99) empty -> .
    (18) languageFunction -> . alterFunction
    (19) languageFunction -> . returnBoolFunction
    (20) languageFunction -> . voidFunction
    (21) tagadaFunction -> . movementFunction
    (22) tagadaFunction -> . hammerFunction
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (29) returnBoolFunction -> . alterbFunction
    (30) returnBoolFunction -> . istrueFunction
    (31) returnBoolFunction -> . numericalConditionFunction
    (32) voidFunction -> . callFunction
    (33) voidFunction -> . valuesFunction
    (34) voidFunction -> . iterativeFunction
    (35) voidFunction -> . breakFunction
    (36) voidFunction -> . caseWhenFunction
    (37) voidFunction -> . caseFunction
    (38) voidFunction -> . printFunction
    (39) movementFunction -> . MOVERIGHT
    (40) movementFunction -> . MOVELEFT
    (41) movementFunction -> . STOP
    (42) hammerFunction -> . HAMMER LPAR direction RPAR
    (47) alterbFunction -> . ALTERB LPAR ID RPAR
    (48) istrueFunction -> . ISTRUE LPAR value RPAR
    (49) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (50) istrueFunction -> . ISTRUE LPAR ID RPAR
    (51) numericalConditionFunction -> . value logicOperator value
    (52) numericalConditionFunction -> . value logicOperator alterFunction
    (53) numericalConditionFunction -> . value logicOperator ID
    (54) numericalConditionFunction -> . alterFunction logicOperator value
    (55) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (56) numericalConditionFunction -> . alterFunction logicOperator ID
    (57) numericalConditionFunction -> . ID logicOperator value
    (58) numericalConditionFunction -> . ID logicOperator alterFunction
    (59) numericalConditionFunction -> . ID logicOperator ID
    (60) callFunction -> . CALL LPAR ID RPAR
    (61) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (62) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (63) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (64) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (65) iterativeFunction -> . repeatFunction
    (66) iterativeFunction -> . untilFunction
    (67) iterativeFunction -> . whileFunction
    (68) breakFunction -> . BREAK
    (88) caseWhenFunction -> . CASE WHEN LPAR value RPAR THEN instructionBlock elseExpression
    (89) caseWhenFunction -> . CASE WHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (90) caseWhenFunction -> . CASE WHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (91) caseFunction -> . CASE ID whenExpression elseExpression
    (69) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (70) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (81) repeatFunction -> . REPEAT LPAR insideInstruction RPAR
    (82) untilFunction -> . UNTIL instructionBlock value
    (83) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (84) untilFunction -> . UNTIL instructionBlock ID
    (85) whileFunction -> . WHILE value instructionBlock
    (86) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (87) whileFunction -> . WHILE ID instructionBlock

    PROC            shift and go to state 8
    NEW             shift and go to state 12
    PPROC           reduce using rule 99 (empty -> .)
    $end            reduce using rule 99 (empty -> .)
    ALTER           shift and go to state 19
    MOVERIGHT       shift and go to state 30
    MOVELEFT        shift and go to state 31
    STOP            shift and go to state 32
    HAMMER          shift and go to state 33
    ALTERB          shift and go to state 34
    ISTRUE          shift and go to state 35
    ID              shift and go to state 9
    CALL            shift and go to state 36
    VALUES          shift and go to state 37
    BREAK           shift and go to state 41
    CASE            shift and go to state 42
    PRINTVALUES     shift and go to state 43
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    REPEAT          shift and go to state 46
    UNTIL           shift and go to state 47
    WHILE           shift and go to state 48

    attribute                      shift and go to state 6
    outsideInstruction             shift and go to state 85
    procedure                      shift and go to state 4
    function                       shift and go to state 5
    empty                          shift and go to state 7
    languageFunction               shift and go to state 10
    tagadaFunction                 shift and go to state 11
    value                          shift and go to state 13
    alterFunction                  shift and go to state 14
    returnBoolFunction             shift and go to state 15
    voidFunction                   shift and go to state 16
    movementFunction               shift and go to state 17
    hammerFunction                 shift and go to state 18
    alterbFunction                 shift and go to state 20
    istrueFunction                 shift and go to state 21
    numericalConditionFunction     shift and go to state 22
    callFunction                   shift and go to state 23
    valuesFunction                 shift and go to state 24
    iterativeFunction              shift and go to state 25
    breakFunction                  shift and go to state 26
    caseWhenFunction               shift and go to state 27
    caseFunction                   shift and go to state 28
    printFunction                  shift and go to state 29
    repeatFunction                 shift and go to state 38
    untilFunction                  shift and go to state 39
    whileFunction                  shift and go to state 40

state 54

    (7) procedure -> PROC ID . instructionBlock
    (14) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 76

    instructionBlock               shift and go to state 86

state 55

    (57) numericalConditionFunction -> ID logicOperator . value
    (58) numericalConditionFunction -> ID logicOperator . alterFunction
    (59) numericalConditionFunction -> ID logicOperator . ID
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR

    ID              shift and go to state 87
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    ALTER           shift and go to state 19

    value                          shift and go to state 88
    alterFunction                  shift and go to state 89

state 56

    (75) logicOperator -> EEOP .

    ID              reduce using rule 75 (logicOperator -> EEOP .)
    NUMVALUE        reduce using rule 75 (logicOperator -> EEOP .)
    BOOLVALUE       reduce using rule 75 (logicOperator -> EEOP .)
    ALTER           reduce using rule 75 (logicOperator -> EEOP .)


state 57

    (76) logicOperator -> NEOP .

    ID              reduce using rule 76 (logicOperator -> NEOP .)
    NUMVALUE        reduce using rule 76 (logicOperator -> NEOP .)
    BOOLVALUE       reduce using rule 76 (logicOperator -> NEOP .)
    ALTER           reduce using rule 76 (logicOperator -> NEOP .)


state 58

    (77) logicOperator -> GETOP .

    ID              reduce using rule 77 (logicOperator -> GETOP .)
    NUMVALUE        reduce using rule 77 (logicOperator -> GETOP .)
    BOOLVALUE       reduce using rule 77 (logicOperator -> GETOP .)
    ALTER           reduce using rule 77 (logicOperator -> GETOP .)


state 59

    (78) logicOperator -> LETOP .

    ID              reduce using rule 78 (logicOperator -> LETOP .)
    NUMVALUE        reduce using rule 78 (logicOperator -> LETOP .)
    BOOLVALUE       reduce using rule 78 (logicOperator -> LETOP .)
    ALTER           reduce using rule 78 (logicOperator -> LETOP .)


state 60

    (79) logicOperator -> GTOP .

    ID              reduce using rule 79 (logicOperator -> GTOP .)
    NUMVALUE        reduce using rule 79 (logicOperator -> GTOP .)
    BOOLVALUE       reduce using rule 79 (logicOperator -> GTOP .)
    ALTER           reduce using rule 79 (logicOperator -> GTOP .)


state 61

    (80) logicOperator -> LTOP .

    ID              reduce using rule 80 (logicOperator -> LTOP .)
    NUMVALUE        reduce using rule 80 (logicOperator -> LTOP .)
    BOOLVALUE       reduce using rule 80 (logicOperator -> LTOP .)
    ALTER           reduce using rule 80 (logicOperator -> LTOP .)


state 62

    (10) attribute -> NEW ID . COMMA LPAR datatype COMMA value RPAR
    (11) attribute -> NEW ID . COMMA LPAR datatype COMMA alterFunction RPAR
    (12) attribute -> NEW ID . COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (13) attribute -> NEW ID . COMMA LPAR datatype COMMA ID RPAR

    COMMA           shift and go to state 90


state 63

    (51) numericalConditionFunction -> value logicOperator . value
    (52) numericalConditionFunction -> value logicOperator . alterFunction
    (53) numericalConditionFunction -> value logicOperator . ID
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR

    ID              shift and go to state 93
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    ALTER           shift and go to state 19

    value                          shift and go to state 91
    alterFunction                  shift and go to state 92

state 64

    (54) numericalConditionFunction -> alterFunction logicOperator . value
    (55) numericalConditionFunction -> alterFunction logicOperator . alterFunction
    (56) numericalConditionFunction -> alterFunction logicOperator . ID
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR

    ID              shift and go to state 96
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    ALTER           shift and go to state 19

    alterFunction                  shift and go to state 94
    value                          shift and go to state 95

state 65

    (27) alterFunction -> ALTER LPAR . ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> ALTER LPAR . ID COMMA numericalOperator COMMA ID RPAR

    ID              shift and go to state 97


state 66

    (42) hammerFunction -> HAMMER LPAR . direction RPAR
    (71) direction -> . NORTH
    (72) direction -> . SOUTH
    (73) direction -> . EAST
    (74) direction -> . WEST

    NORTH           shift and go to state 99
    SOUTH           shift and go to state 100
    EAST            shift and go to state 101
    WEST            shift and go to state 102

    direction                      shift and go to state 98

state 67

    (47) alterbFunction -> ALTERB LPAR . ID RPAR

    ID              shift and go to state 103


state 68

    (48) istrueFunction -> ISTRUE LPAR . value RPAR
    (49) istrueFunction -> ISTRUE LPAR . returnBoolFunction RPAR
    (50) istrueFunction -> ISTRUE LPAR . ID RPAR
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (29) returnBoolFunction -> . alterbFunction
    (30) returnBoolFunction -> . istrueFunction
    (31) returnBoolFunction -> . numericalConditionFunction
    (47) alterbFunction -> . ALTERB LPAR ID RPAR
    (48) istrueFunction -> . ISTRUE LPAR value RPAR
    (49) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (50) istrueFunction -> . ISTRUE LPAR ID RPAR
    (51) numericalConditionFunction -> . value logicOperator value
    (52) numericalConditionFunction -> . value logicOperator alterFunction
    (53) numericalConditionFunction -> . value logicOperator ID
    (54) numericalConditionFunction -> . alterFunction logicOperator value
    (55) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (56) numericalConditionFunction -> . alterFunction logicOperator ID
    (57) numericalConditionFunction -> . ID logicOperator value
    (58) numericalConditionFunction -> . ID logicOperator alterFunction
    (59) numericalConditionFunction -> . ID logicOperator ID
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR

    ID              shift and go to state 106
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    ALTERB          shift and go to state 34
    ISTRUE          shift and go to state 35
    ALTER           shift and go to state 19

    value                          shift and go to state 104
    returnBoolFunction             shift and go to state 105
    alterbFunction                 shift and go to state 20
    istrueFunction                 shift and go to state 21
    numericalConditionFunction     shift and go to state 22
    alterFunction                  shift and go to state 80

state 69

    (60) callFunction -> CALL LPAR . ID RPAR

    ID              shift and go to state 107


state 70

    (61) valuesFunction -> VALUES LPAR . ID COMMA value RPAR
    (62) valuesFunction -> VALUES LPAR . ID COMMA alterFunction RPAR
    (63) valuesFunction -> VALUES LPAR . ID COMMA returnBoolFunction RPAR
    (64) valuesFunction -> VALUES LPAR . ID COMMA ID RPAR

    ID              shift and go to state 108


state 71

    (88) caseWhenFunction -> CASE WHEN . LPAR value RPAR THEN instructionBlock elseExpression
    (89) caseWhenFunction -> CASE WHEN . LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (90) caseWhenFunction -> CASE WHEN . LPAR ID RPAR THEN instructionBlock elseExpression

    LPAR            shift and go to state 109


state 72

    (91) caseFunction -> CASE ID . whenExpression elseExpression
    (97) whenExpression -> . WHEN value THEN instructionBlock whenExpression
    (98) whenExpression -> . WHEN value THEN instructionBlock

    WHEN            shift and go to state 111

    whenExpression                 shift and go to state 110

state 73

    (69) printFunction -> PRINTVALUES LPAR . ID consolePrint RPAR
    (70) printFunction -> PRINTVALUES LPAR . TEXT consolePrint RPAR

    ID              shift and go to state 112
    TEXT            shift and go to state 113


state 74

    (81) repeatFunction -> REPEAT LPAR . insideInstruction RPAR
    (15) insideInstruction -> . function SEMMICOLOM insideInstruction
    (16) insideInstruction -> . attribute SEMMICOLOM insideInstruction
    (17) insideInstruction -> . empty
    (8) function -> . languageFunction
    (9) function -> . tagadaFunction
    (10) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (11) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (12) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (13) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (99) empty -> .
    (18) languageFunction -> . alterFunction
    (19) languageFunction -> . returnBoolFunction
    (20) languageFunction -> . voidFunction
    (21) tagadaFunction -> . movementFunction
    (22) tagadaFunction -> . hammerFunction
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (29) returnBoolFunction -> . alterbFunction
    (30) returnBoolFunction -> . istrueFunction
    (31) returnBoolFunction -> . numericalConditionFunction
    (32) voidFunction -> . callFunction
    (33) voidFunction -> . valuesFunction
    (34) voidFunction -> . iterativeFunction
    (35) voidFunction -> . breakFunction
    (36) voidFunction -> . caseWhenFunction
    (37) voidFunction -> . caseFunction
    (38) voidFunction -> . printFunction
    (39) movementFunction -> . MOVERIGHT
    (40) movementFunction -> . MOVELEFT
    (41) movementFunction -> . STOP
    (42) hammerFunction -> . HAMMER LPAR direction RPAR
    (47) alterbFunction -> . ALTERB LPAR ID RPAR
    (48) istrueFunction -> . ISTRUE LPAR value RPAR
    (49) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (50) istrueFunction -> . ISTRUE LPAR ID RPAR
    (51) numericalConditionFunction -> . value logicOperator value
    (52) numericalConditionFunction -> . value logicOperator alterFunction
    (53) numericalConditionFunction -> . value logicOperator ID
    (54) numericalConditionFunction -> . alterFunction logicOperator value
    (55) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (56) numericalConditionFunction -> . alterFunction logicOperator ID
    (57) numericalConditionFunction -> . ID logicOperator value
    (58) numericalConditionFunction -> . ID logicOperator alterFunction
    (59) numericalConditionFunction -> . ID logicOperator ID
    (60) callFunction -> . CALL LPAR ID RPAR
    (61) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (62) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (63) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (64) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (65) iterativeFunction -> . repeatFunction
    (66) iterativeFunction -> . untilFunction
    (67) iterativeFunction -> . whileFunction
    (68) breakFunction -> . BREAK
    (88) caseWhenFunction -> . CASE WHEN LPAR value RPAR THEN instructionBlock elseExpression
    (89) caseWhenFunction -> . CASE WHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (90) caseWhenFunction -> . CASE WHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (91) caseFunction -> . CASE ID whenExpression elseExpression
    (69) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (70) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (81) repeatFunction -> . REPEAT LPAR insideInstruction RPAR
    (82) untilFunction -> . UNTIL instructionBlock value
    (83) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (84) untilFunction -> . UNTIL instructionBlock ID
    (85) whileFunction -> . WHILE value instructionBlock
    (86) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (87) whileFunction -> . WHILE ID instructionBlock

    NEW             shift and go to state 12
    RPAR            reduce using rule 99 (empty -> .)
    ALTER           shift and go to state 19
    MOVERIGHT       shift and go to state 30
    MOVELEFT        shift and go to state 31
    STOP            shift and go to state 32
    HAMMER          shift and go to state 33
    ALTERB          shift and go to state 34
    ISTRUE          shift and go to state 35
    ID              shift and go to state 9
    CALL            shift and go to state 36
    VALUES          shift and go to state 37
    BREAK           shift and go to state 41
    CASE            shift and go to state 42
    PRINTVALUES     shift and go to state 43
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    REPEAT          shift and go to state 46
    UNTIL           shift and go to state 47
    WHILE           shift and go to state 48

    insideInstruction              shift and go to state 114
    function                       shift and go to state 115
    attribute                      shift and go to state 116
    empty                          shift and go to state 117
    languageFunction               shift and go to state 10
    tagadaFunction                 shift and go to state 11
    value                          shift and go to state 13
    alterFunction                  shift and go to state 14
    returnBoolFunction             shift and go to state 15
    voidFunction                   shift and go to state 16
    movementFunction               shift and go to state 17
    hammerFunction                 shift and go to state 18
    alterbFunction                 shift and go to state 20
    istrueFunction                 shift and go to state 21
    numericalConditionFunction     shift and go to state 22
    callFunction                   shift and go to state 23
    valuesFunction                 shift and go to state 24
    iterativeFunction              shift and go to state 25
    breakFunction                  shift and go to state 26
    caseWhenFunction               shift and go to state 27
    caseFunction                   shift and go to state 28
    printFunction                  shift and go to state 29
    repeatFunction                 shift and go to state 38
    untilFunction                  shift and go to state 39
    whileFunction                  shift and go to state 40

state 75

    (82) untilFunction -> UNTIL instructionBlock . value
    (83) untilFunction -> UNTIL instructionBlock . returnBoolFunction
    (84) untilFunction -> UNTIL instructionBlock . ID
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (29) returnBoolFunction -> . alterbFunction
    (30) returnBoolFunction -> . istrueFunction
    (31) returnBoolFunction -> . numericalConditionFunction
    (47) alterbFunction -> . ALTERB LPAR ID RPAR
    (48) istrueFunction -> . ISTRUE LPAR value RPAR
    (49) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (50) istrueFunction -> . ISTRUE LPAR ID RPAR
    (51) numericalConditionFunction -> . value logicOperator value
    (52) numericalConditionFunction -> . value logicOperator alterFunction
    (53) numericalConditionFunction -> . value logicOperator ID
    (54) numericalConditionFunction -> . alterFunction logicOperator value
    (55) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (56) numericalConditionFunction -> . alterFunction logicOperator ID
    (57) numericalConditionFunction -> . ID logicOperator value
    (58) numericalConditionFunction -> . ID logicOperator alterFunction
    (59) numericalConditionFunction -> . ID logicOperator ID
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR

    ID              shift and go to state 120
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    ALTERB          shift and go to state 34
    ISTRUE          shift and go to state 35
    ALTER           shift and go to state 19

    value                          shift and go to state 118
    returnBoolFunction             shift and go to state 119
    alterbFunction                 shift and go to state 20
    istrueFunction                 shift and go to state 21
    numericalConditionFunction     shift and go to state 22
    alterFunction                  shift and go to state 80

state 76

    (14) instructionBlock -> LPAR . insideInstruction RPAR
    (15) insideInstruction -> . function SEMMICOLOM insideInstruction
    (16) insideInstruction -> . attribute SEMMICOLOM insideInstruction
    (17) insideInstruction -> . empty
    (8) function -> . languageFunction
    (9) function -> . tagadaFunction
    (10) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (11) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (12) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (13) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (99) empty -> .
    (18) languageFunction -> . alterFunction
    (19) languageFunction -> . returnBoolFunction
    (20) languageFunction -> . voidFunction
    (21) tagadaFunction -> . movementFunction
    (22) tagadaFunction -> . hammerFunction
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (29) returnBoolFunction -> . alterbFunction
    (30) returnBoolFunction -> . istrueFunction
    (31) returnBoolFunction -> . numericalConditionFunction
    (32) voidFunction -> . callFunction
    (33) voidFunction -> . valuesFunction
    (34) voidFunction -> . iterativeFunction
    (35) voidFunction -> . breakFunction
    (36) voidFunction -> . caseWhenFunction
    (37) voidFunction -> . caseFunction
    (38) voidFunction -> . printFunction
    (39) movementFunction -> . MOVERIGHT
    (40) movementFunction -> . MOVELEFT
    (41) movementFunction -> . STOP
    (42) hammerFunction -> . HAMMER LPAR direction RPAR
    (47) alterbFunction -> . ALTERB LPAR ID RPAR
    (48) istrueFunction -> . ISTRUE LPAR value RPAR
    (49) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (50) istrueFunction -> . ISTRUE LPAR ID RPAR
    (51) numericalConditionFunction -> . value logicOperator value
    (52) numericalConditionFunction -> . value logicOperator alterFunction
    (53) numericalConditionFunction -> . value logicOperator ID
    (54) numericalConditionFunction -> . alterFunction logicOperator value
    (55) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (56) numericalConditionFunction -> . alterFunction logicOperator ID
    (57) numericalConditionFunction -> . ID logicOperator value
    (58) numericalConditionFunction -> . ID logicOperator alterFunction
    (59) numericalConditionFunction -> . ID logicOperator ID
    (60) callFunction -> . CALL LPAR ID RPAR
    (61) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (62) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (63) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (64) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (65) iterativeFunction -> . repeatFunction
    (66) iterativeFunction -> . untilFunction
    (67) iterativeFunction -> . whileFunction
    (68) breakFunction -> . BREAK
    (88) caseWhenFunction -> . CASE WHEN LPAR value RPAR THEN instructionBlock elseExpression
    (89) caseWhenFunction -> . CASE WHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (90) caseWhenFunction -> . CASE WHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (91) caseFunction -> . CASE ID whenExpression elseExpression
    (69) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (70) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (81) repeatFunction -> . REPEAT LPAR insideInstruction RPAR
    (82) untilFunction -> . UNTIL instructionBlock value
    (83) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (84) untilFunction -> . UNTIL instructionBlock ID
    (85) whileFunction -> . WHILE value instructionBlock
    (86) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (87) whileFunction -> . WHILE ID instructionBlock

    NEW             shift and go to state 12
    RPAR            reduce using rule 99 (empty -> .)
    ALTER           shift and go to state 19
    MOVERIGHT       shift and go to state 30
    MOVELEFT        shift and go to state 31
    STOP            shift and go to state 32
    HAMMER          shift and go to state 33
    ALTERB          shift and go to state 34
    ISTRUE          shift and go to state 35
    ID              shift and go to state 9
    CALL            shift and go to state 36
    VALUES          shift and go to state 37
    BREAK           shift and go to state 41
    CASE            shift and go to state 42
    PRINTVALUES     shift and go to state 43
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    REPEAT          shift and go to state 46
    UNTIL           shift and go to state 47
    WHILE           shift and go to state 48

    insideInstruction              shift and go to state 121
    function                       shift and go to state 115
    attribute                      shift and go to state 116
    empty                          shift and go to state 117
    languageFunction               shift and go to state 10
    tagadaFunction                 shift and go to state 11
    value                          shift and go to state 13
    alterFunction                  shift and go to state 14
    returnBoolFunction             shift and go to state 15
    voidFunction                   shift and go to state 16
    movementFunction               shift and go to state 17
    hammerFunction                 shift and go to state 18
    alterbFunction                 shift and go to state 20
    istrueFunction                 shift and go to state 21
    numericalConditionFunction     shift and go to state 22
    callFunction                   shift and go to state 23
    valuesFunction                 shift and go to state 24
    iterativeFunction              shift and go to state 25
    breakFunction                  shift and go to state 26
    caseWhenFunction               shift and go to state 27
    caseFunction                   shift and go to state 28
    printFunction                  shift and go to state 29
    repeatFunction                 shift and go to state 38
    untilFunction                  shift and go to state 39
    whileFunction                  shift and go to state 40

state 77

    (85) whileFunction -> WHILE value . instructionBlock
    (51) numericalConditionFunction -> value . logicOperator value
    (52) numericalConditionFunction -> value . logicOperator alterFunction
    (53) numericalConditionFunction -> value . logicOperator ID
    (14) instructionBlock -> . LPAR insideInstruction RPAR
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    LPAR            shift and go to state 76
    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    instructionBlock               shift and go to state 122
    logicOperator                  shift and go to state 63

state 78

    (86) whileFunction -> WHILE returnBoolFunction . instructionBlock
    (14) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 76

    instructionBlock               shift and go to state 123

state 79

    (87) whileFunction -> WHILE ID . instructionBlock
    (57) numericalConditionFunction -> ID . logicOperator value
    (58) numericalConditionFunction -> ID . logicOperator alterFunction
    (59) numericalConditionFunction -> ID . logicOperator ID
    (14) instructionBlock -> . LPAR insideInstruction RPAR
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    LPAR            shift and go to state 76
    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    instructionBlock               shift and go to state 124
    logicOperator                  shift and go to state 55

state 80

    (54) numericalConditionFunction -> alterFunction . logicOperator value
    (55) numericalConditionFunction -> alterFunction . logicOperator alterFunction
    (56) numericalConditionFunction -> alterFunction . logicOperator ID
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    logicOperator                  shift and go to state 64

state 81

    (1) program -> COMMENT outsideInstruction principalProcedure outsideInstruction .

    $end            reduce using rule 1 (program -> COMMENT outsideInstruction principalProcedure outsideInstruction .)


state 82

    (6) principalProcedure -> PPROC instructionBlock . SEMMICOLOM

    SEMMICOLOM      shift and go to state 125


state 83

    (2) outsideInstruction -> procedure SEMMICOLOM outsideInstruction .

    PPROC           reduce using rule 2 (outsideInstruction -> procedure SEMMICOLOM outsideInstruction .)
    $end            reduce using rule 2 (outsideInstruction -> procedure SEMMICOLOM outsideInstruction .)


state 84

    (3) outsideInstruction -> function SEMMICOLOM outsideInstruction .

    PPROC           reduce using rule 3 (outsideInstruction -> function SEMMICOLOM outsideInstruction .)
    $end            reduce using rule 3 (outsideInstruction -> function SEMMICOLOM outsideInstruction .)


state 85

    (4) outsideInstruction -> attribute SEMMICOLOM outsideInstruction .

    PPROC           reduce using rule 4 (outsideInstruction -> attribute SEMMICOLOM outsideInstruction .)
    $end            reduce using rule 4 (outsideInstruction -> attribute SEMMICOLOM outsideInstruction .)


state 86

    (7) procedure -> PROC ID instructionBlock .

    SEMMICOLOM      reduce using rule 7 (procedure -> PROC ID instructionBlock .)


state 87

    (59) numericalConditionFunction -> ID logicOperator ID .

    SEMMICOLOM      reduce using rule 59 (numericalConditionFunction -> ID logicOperator ID .)
    LPAR            reduce using rule 59 (numericalConditionFunction -> ID logicOperator ID .)
    RPAR            reduce using rule 59 (numericalConditionFunction -> ID logicOperator ID .)


state 88

    (57) numericalConditionFunction -> ID logicOperator value .

    SEMMICOLOM      reduce using rule 57 (numericalConditionFunction -> ID logicOperator value .)
    LPAR            reduce using rule 57 (numericalConditionFunction -> ID logicOperator value .)
    RPAR            reduce using rule 57 (numericalConditionFunction -> ID logicOperator value .)


state 89

    (58) numericalConditionFunction -> ID logicOperator alterFunction .

    SEMMICOLOM      reduce using rule 58 (numericalConditionFunction -> ID logicOperator alterFunction .)
    LPAR            reduce using rule 58 (numericalConditionFunction -> ID logicOperator alterFunction .)
    RPAR            reduce using rule 58 (numericalConditionFunction -> ID logicOperator alterFunction .)


state 90

    (10) attribute -> NEW ID COMMA . LPAR datatype COMMA value RPAR
    (11) attribute -> NEW ID COMMA . LPAR datatype COMMA alterFunction RPAR
    (12) attribute -> NEW ID COMMA . LPAR datatype COMMA returnBoolFunction RPAR
    (13) attribute -> NEW ID COMMA . LPAR datatype COMMA ID RPAR

    LPAR            shift and go to state 126


state 91

    (51) numericalConditionFunction -> value logicOperator value .

    SEMMICOLOM      reduce using rule 51 (numericalConditionFunction -> value logicOperator value .)
    LPAR            reduce using rule 51 (numericalConditionFunction -> value logicOperator value .)
    RPAR            reduce using rule 51 (numericalConditionFunction -> value logicOperator value .)


state 92

    (52) numericalConditionFunction -> value logicOperator alterFunction .

    SEMMICOLOM      reduce using rule 52 (numericalConditionFunction -> value logicOperator alterFunction .)
    LPAR            reduce using rule 52 (numericalConditionFunction -> value logicOperator alterFunction .)
    RPAR            reduce using rule 52 (numericalConditionFunction -> value logicOperator alterFunction .)


state 93

    (53) numericalConditionFunction -> value logicOperator ID .

    SEMMICOLOM      reduce using rule 53 (numericalConditionFunction -> value logicOperator ID .)
    LPAR            reduce using rule 53 (numericalConditionFunction -> value logicOperator ID .)
    RPAR            reduce using rule 53 (numericalConditionFunction -> value logicOperator ID .)


state 94

    (55) numericalConditionFunction -> alterFunction logicOperator alterFunction .

    SEMMICOLOM      reduce using rule 55 (numericalConditionFunction -> alterFunction logicOperator alterFunction .)
    LPAR            reduce using rule 55 (numericalConditionFunction -> alterFunction logicOperator alterFunction .)
    RPAR            reduce using rule 55 (numericalConditionFunction -> alterFunction logicOperator alterFunction .)


state 95

    (54) numericalConditionFunction -> alterFunction logicOperator value .

    SEMMICOLOM      reduce using rule 54 (numericalConditionFunction -> alterFunction logicOperator value .)
    LPAR            reduce using rule 54 (numericalConditionFunction -> alterFunction logicOperator value .)
    RPAR            reduce using rule 54 (numericalConditionFunction -> alterFunction logicOperator value .)


state 96

    (56) numericalConditionFunction -> alterFunction logicOperator ID .

    SEMMICOLOM      reduce using rule 56 (numericalConditionFunction -> alterFunction logicOperator ID .)
    LPAR            reduce using rule 56 (numericalConditionFunction -> alterFunction logicOperator ID .)
    RPAR            reduce using rule 56 (numericalConditionFunction -> alterFunction logicOperator ID .)


state 97

    (27) alterFunction -> ALTER LPAR ID . COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> ALTER LPAR ID . COMMA numericalOperator COMMA ID RPAR

    COMMA           shift and go to state 127


state 98

    (42) hammerFunction -> HAMMER LPAR direction . RPAR

    RPAR            shift and go to state 128


state 99

    (71) direction -> NORTH .

    RPAR            reduce using rule 71 (direction -> NORTH .)


state 100

    (72) direction -> SOUTH .

    RPAR            reduce using rule 72 (direction -> SOUTH .)


state 101

    (73) direction -> EAST .

    RPAR            reduce using rule 73 (direction -> EAST .)


state 102

    (74) direction -> WEST .

    RPAR            reduce using rule 74 (direction -> WEST .)


state 103

    (47) alterbFunction -> ALTERB LPAR ID . RPAR

    RPAR            shift and go to state 129


state 104

    (48) istrueFunction -> ISTRUE LPAR value . RPAR
    (51) numericalConditionFunction -> value . logicOperator value
    (52) numericalConditionFunction -> value . logicOperator alterFunction
    (53) numericalConditionFunction -> value . logicOperator ID
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    RPAR            shift and go to state 130
    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    logicOperator                  shift and go to state 63

state 105

    (49) istrueFunction -> ISTRUE LPAR returnBoolFunction . RPAR

    RPAR            shift and go to state 131


state 106

    (50) istrueFunction -> ISTRUE LPAR ID . RPAR
    (57) numericalConditionFunction -> ID . logicOperator value
    (58) numericalConditionFunction -> ID . logicOperator alterFunction
    (59) numericalConditionFunction -> ID . logicOperator ID
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    RPAR            shift and go to state 132
    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    logicOperator                  shift and go to state 55

state 107

    (60) callFunction -> CALL LPAR ID . RPAR

    RPAR            shift and go to state 133


state 108

    (61) valuesFunction -> VALUES LPAR ID . COMMA value RPAR
    (62) valuesFunction -> VALUES LPAR ID . COMMA alterFunction RPAR
    (63) valuesFunction -> VALUES LPAR ID . COMMA returnBoolFunction RPAR
    (64) valuesFunction -> VALUES LPAR ID . COMMA ID RPAR

    COMMA           shift and go to state 134


state 109

    (88) caseWhenFunction -> CASE WHEN LPAR . value RPAR THEN instructionBlock elseExpression
    (89) caseWhenFunction -> CASE WHEN LPAR . returnBoolFunction RPAR THEN instructionBlock elseExpression
    (90) caseWhenFunction -> CASE WHEN LPAR . ID RPAR THEN instructionBlock elseExpression
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (29) returnBoolFunction -> . alterbFunction
    (30) returnBoolFunction -> . istrueFunction
    (31) returnBoolFunction -> . numericalConditionFunction
    (47) alterbFunction -> . ALTERB LPAR ID RPAR
    (48) istrueFunction -> . ISTRUE LPAR value RPAR
    (49) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (50) istrueFunction -> . ISTRUE LPAR ID RPAR
    (51) numericalConditionFunction -> . value logicOperator value
    (52) numericalConditionFunction -> . value logicOperator alterFunction
    (53) numericalConditionFunction -> . value logicOperator ID
    (54) numericalConditionFunction -> . alterFunction logicOperator value
    (55) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (56) numericalConditionFunction -> . alterFunction logicOperator ID
    (57) numericalConditionFunction -> . ID logicOperator value
    (58) numericalConditionFunction -> . ID logicOperator alterFunction
    (59) numericalConditionFunction -> . ID logicOperator ID
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR

    ID              shift and go to state 137
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    ALTERB          shift and go to state 34
    ISTRUE          shift and go to state 35
    ALTER           shift and go to state 19

    value                          shift and go to state 135
    returnBoolFunction             shift and go to state 136
    alterbFunction                 shift and go to state 20
    istrueFunction                 shift and go to state 21
    numericalConditionFunction     shift and go to state 22
    alterFunction                  shift and go to state 80

state 110

    (91) caseFunction -> CASE ID whenExpression . elseExpression
    (95) elseExpression -> . ELSE instructionBlock
    (96) elseExpression -> . empty
    (99) empty -> .

    ELSE            shift and go to state 139
    SEMMICOLOM      reduce using rule 99 (empty -> .)

    elseExpression                 shift and go to state 138
    empty                          shift and go to state 140

state 111

    (97) whenExpression -> WHEN . value THEN instructionBlock whenExpression
    (98) whenExpression -> WHEN . value THEN instructionBlock
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE

    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45

    value                          shift and go to state 141

state 112

    (69) printFunction -> PRINTVALUES LPAR ID . consolePrint RPAR
    (92) consolePrint -> . COMMA ID consolePrint
    (93) consolePrint -> . COMMA TEXT consolePrint
    (94) consolePrint -> . empty
    (99) empty -> .

    COMMA           shift and go to state 143
    RPAR            reduce using rule 99 (empty -> .)

    consolePrint                   shift and go to state 142
    empty                          shift and go to state 144

state 113

    (70) printFunction -> PRINTVALUES LPAR TEXT . consolePrint RPAR
    (92) consolePrint -> . COMMA ID consolePrint
    (93) consolePrint -> . COMMA TEXT consolePrint
    (94) consolePrint -> . empty
    (99) empty -> .

    COMMA           shift and go to state 143
    RPAR            reduce using rule 99 (empty -> .)

    consolePrint                   shift and go to state 145
    empty                          shift and go to state 144

state 114

    (81) repeatFunction -> REPEAT LPAR insideInstruction . RPAR

    RPAR            shift and go to state 146


state 115

    (15) insideInstruction -> function . SEMMICOLOM insideInstruction

    SEMMICOLOM      shift and go to state 147


state 116

    (16) insideInstruction -> attribute . SEMMICOLOM insideInstruction

    SEMMICOLOM      shift and go to state 148


state 117

    (17) insideInstruction -> empty .

    RPAR            reduce using rule 17 (insideInstruction -> empty .)


state 118

    (82) untilFunction -> UNTIL instructionBlock value .
    (51) numericalConditionFunction -> value . logicOperator value
    (52) numericalConditionFunction -> value . logicOperator alterFunction
    (53) numericalConditionFunction -> value . logicOperator ID
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    SEMMICOLOM      reduce using rule 82 (untilFunction -> UNTIL instructionBlock value .)
    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    logicOperator                  shift and go to state 63

state 119

    (83) untilFunction -> UNTIL instructionBlock returnBoolFunction .

    SEMMICOLOM      reduce using rule 83 (untilFunction -> UNTIL instructionBlock returnBoolFunction .)


state 120

    (84) untilFunction -> UNTIL instructionBlock ID .
    (57) numericalConditionFunction -> ID . logicOperator value
    (58) numericalConditionFunction -> ID . logicOperator alterFunction
    (59) numericalConditionFunction -> ID . logicOperator ID
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    SEMMICOLOM      reduce using rule 84 (untilFunction -> UNTIL instructionBlock ID .)
    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    logicOperator                  shift and go to state 55

state 121

    (14) instructionBlock -> LPAR insideInstruction . RPAR

    RPAR            shift and go to state 149


state 122

    (85) whileFunction -> WHILE value instructionBlock .

    SEMMICOLOM      reduce using rule 85 (whileFunction -> WHILE value instructionBlock .)


state 123

    (86) whileFunction -> WHILE returnBoolFunction instructionBlock .

    SEMMICOLOM      reduce using rule 86 (whileFunction -> WHILE returnBoolFunction instructionBlock .)


state 124

    (87) whileFunction -> WHILE ID instructionBlock .

    SEMMICOLOM      reduce using rule 87 (whileFunction -> WHILE ID instructionBlock .)


state 125

    (6) principalProcedure -> PPROC instructionBlock SEMMICOLOM .

    PROC            reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    NEW             reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    ALTER           reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    MOVERIGHT       reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    MOVELEFT        reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    STOP            reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    HAMMER          reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    ALTERB          reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    ISTRUE          reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    ID              reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    CALL            reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    VALUES          reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    BREAK           reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    CASE            reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    PRINTVALUES     reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    NUMVALUE        reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    BOOLVALUE       reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    REPEAT          reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    UNTIL           reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    WHILE           reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)
    $end            reduce using rule 6 (principalProcedure -> PPROC instructionBlock SEMMICOLOM .)


state 126

    (10) attribute -> NEW ID COMMA LPAR . datatype COMMA value RPAR
    (11) attribute -> NEW ID COMMA LPAR . datatype COMMA alterFunction RPAR
    (12) attribute -> NEW ID COMMA LPAR . datatype COMMA returnBoolFunction RPAR
    (13) attribute -> NEW ID COMMA LPAR . datatype COMMA ID RPAR
    (23) datatype -> . NUMDT
    (24) datatype -> . BOOLDT

    NUMDT           shift and go to state 151
    BOOLDT          shift and go to state 152

    datatype                       shift and go to state 150

state 127

    (27) alterFunction -> ALTER LPAR ID COMMA . numericalOperator COMMA value RPAR
    (28) alterFunction -> ALTER LPAR ID COMMA . numericalOperator COMMA ID RPAR
    (43) numericalOperator -> . ADDOP
    (44) numericalOperator -> . SUBOP
    (45) numericalOperator -> . MULOP
    (46) numericalOperator -> . DIVOP

    ADDOP           shift and go to state 154
    SUBOP           shift and go to state 155
    MULOP           shift and go to state 156
    DIVOP           shift and go to state 157

    numericalOperator              shift and go to state 153

state 128

    (42) hammerFunction -> HAMMER LPAR direction RPAR .

    SEMMICOLOM      reduce using rule 42 (hammerFunction -> HAMMER LPAR direction RPAR .)


state 129

    (47) alterbFunction -> ALTERB LPAR ID RPAR .

    SEMMICOLOM      reduce using rule 47 (alterbFunction -> ALTERB LPAR ID RPAR .)
    LPAR            reduce using rule 47 (alterbFunction -> ALTERB LPAR ID RPAR .)
    RPAR            reduce using rule 47 (alterbFunction -> ALTERB LPAR ID RPAR .)


state 130

    (48) istrueFunction -> ISTRUE LPAR value RPAR .

    SEMMICOLOM      reduce using rule 48 (istrueFunction -> ISTRUE LPAR value RPAR .)
    LPAR            reduce using rule 48 (istrueFunction -> ISTRUE LPAR value RPAR .)
    RPAR            reduce using rule 48 (istrueFunction -> ISTRUE LPAR value RPAR .)


state 131

    (49) istrueFunction -> ISTRUE LPAR returnBoolFunction RPAR .

    SEMMICOLOM      reduce using rule 49 (istrueFunction -> ISTRUE LPAR returnBoolFunction RPAR .)
    LPAR            reduce using rule 49 (istrueFunction -> ISTRUE LPAR returnBoolFunction RPAR .)
    RPAR            reduce using rule 49 (istrueFunction -> ISTRUE LPAR returnBoolFunction RPAR .)


state 132

    (50) istrueFunction -> ISTRUE LPAR ID RPAR .

    SEMMICOLOM      reduce using rule 50 (istrueFunction -> ISTRUE LPAR ID RPAR .)
    LPAR            reduce using rule 50 (istrueFunction -> ISTRUE LPAR ID RPAR .)
    RPAR            reduce using rule 50 (istrueFunction -> ISTRUE LPAR ID RPAR .)


state 133

    (60) callFunction -> CALL LPAR ID RPAR .

    SEMMICOLOM      reduce using rule 60 (callFunction -> CALL LPAR ID RPAR .)


state 134

    (61) valuesFunction -> VALUES LPAR ID COMMA . value RPAR
    (62) valuesFunction -> VALUES LPAR ID COMMA . alterFunction RPAR
    (63) valuesFunction -> VALUES LPAR ID COMMA . returnBoolFunction RPAR
    (64) valuesFunction -> VALUES LPAR ID COMMA . ID RPAR
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (29) returnBoolFunction -> . alterbFunction
    (30) returnBoolFunction -> . istrueFunction
    (31) returnBoolFunction -> . numericalConditionFunction
    (47) alterbFunction -> . ALTERB LPAR ID RPAR
    (48) istrueFunction -> . ISTRUE LPAR value RPAR
    (49) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (50) istrueFunction -> . ISTRUE LPAR ID RPAR
    (51) numericalConditionFunction -> . value logicOperator value
    (52) numericalConditionFunction -> . value logicOperator alterFunction
    (53) numericalConditionFunction -> . value logicOperator ID
    (54) numericalConditionFunction -> . alterFunction logicOperator value
    (55) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (56) numericalConditionFunction -> . alterFunction logicOperator ID
    (57) numericalConditionFunction -> . ID logicOperator value
    (58) numericalConditionFunction -> . ID logicOperator alterFunction
    (59) numericalConditionFunction -> . ID logicOperator ID

    ID              shift and go to state 158
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    ALTER           shift and go to state 19
    ALTERB          shift and go to state 34
    ISTRUE          shift and go to state 35

    value                          shift and go to state 159
    alterFunction                  shift and go to state 160
    returnBoolFunction             shift and go to state 161
    alterbFunction                 shift and go to state 20
    istrueFunction                 shift and go to state 21
    numericalConditionFunction     shift and go to state 22

state 135

    (88) caseWhenFunction -> CASE WHEN LPAR value . RPAR THEN instructionBlock elseExpression
    (51) numericalConditionFunction -> value . logicOperator value
    (52) numericalConditionFunction -> value . logicOperator alterFunction
    (53) numericalConditionFunction -> value . logicOperator ID
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    RPAR            shift and go to state 162
    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    logicOperator                  shift and go to state 63

state 136

    (89) caseWhenFunction -> CASE WHEN LPAR returnBoolFunction . RPAR THEN instructionBlock elseExpression

    RPAR            shift and go to state 163


state 137

    (90) caseWhenFunction -> CASE WHEN LPAR ID . RPAR THEN instructionBlock elseExpression
    (57) numericalConditionFunction -> ID . logicOperator value
    (58) numericalConditionFunction -> ID . logicOperator alterFunction
    (59) numericalConditionFunction -> ID . logicOperator ID
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    RPAR            shift and go to state 164
    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    logicOperator                  shift and go to state 55

state 138

    (91) caseFunction -> CASE ID whenExpression elseExpression .

    SEMMICOLOM      reduce using rule 91 (caseFunction -> CASE ID whenExpression elseExpression .)


state 139

    (95) elseExpression -> ELSE . instructionBlock
    (14) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 76

    instructionBlock               shift and go to state 165

state 140

    (96) elseExpression -> empty .

    SEMMICOLOM      reduce using rule 96 (elseExpression -> empty .)


state 141

    (97) whenExpression -> WHEN value . THEN instructionBlock whenExpression
    (98) whenExpression -> WHEN value . THEN instructionBlock

    THEN            shift and go to state 166


state 142

    (69) printFunction -> PRINTVALUES LPAR ID consolePrint . RPAR

    RPAR            shift and go to state 167


state 143

    (92) consolePrint -> COMMA . ID consolePrint
    (93) consolePrint -> COMMA . TEXT consolePrint

    ID              shift and go to state 168
    TEXT            shift and go to state 169


state 144

    (94) consolePrint -> empty .

    RPAR            reduce using rule 94 (consolePrint -> empty .)


state 145

    (70) printFunction -> PRINTVALUES LPAR TEXT consolePrint . RPAR

    RPAR            shift and go to state 170


state 146

    (81) repeatFunction -> REPEAT LPAR insideInstruction RPAR .

    SEMMICOLOM      reduce using rule 81 (repeatFunction -> REPEAT LPAR insideInstruction RPAR .)


state 147

    (15) insideInstruction -> function SEMMICOLOM . insideInstruction
    (15) insideInstruction -> . function SEMMICOLOM insideInstruction
    (16) insideInstruction -> . attribute SEMMICOLOM insideInstruction
    (17) insideInstruction -> . empty
    (8) function -> . languageFunction
    (9) function -> . tagadaFunction
    (10) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (11) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (12) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (13) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (99) empty -> .
    (18) languageFunction -> . alterFunction
    (19) languageFunction -> . returnBoolFunction
    (20) languageFunction -> . voidFunction
    (21) tagadaFunction -> . movementFunction
    (22) tagadaFunction -> . hammerFunction
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (29) returnBoolFunction -> . alterbFunction
    (30) returnBoolFunction -> . istrueFunction
    (31) returnBoolFunction -> . numericalConditionFunction
    (32) voidFunction -> . callFunction
    (33) voidFunction -> . valuesFunction
    (34) voidFunction -> . iterativeFunction
    (35) voidFunction -> . breakFunction
    (36) voidFunction -> . caseWhenFunction
    (37) voidFunction -> . caseFunction
    (38) voidFunction -> . printFunction
    (39) movementFunction -> . MOVERIGHT
    (40) movementFunction -> . MOVELEFT
    (41) movementFunction -> . STOP
    (42) hammerFunction -> . HAMMER LPAR direction RPAR
    (47) alterbFunction -> . ALTERB LPAR ID RPAR
    (48) istrueFunction -> . ISTRUE LPAR value RPAR
    (49) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (50) istrueFunction -> . ISTRUE LPAR ID RPAR
    (51) numericalConditionFunction -> . value logicOperator value
    (52) numericalConditionFunction -> . value logicOperator alterFunction
    (53) numericalConditionFunction -> . value logicOperator ID
    (54) numericalConditionFunction -> . alterFunction logicOperator value
    (55) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (56) numericalConditionFunction -> . alterFunction logicOperator ID
    (57) numericalConditionFunction -> . ID logicOperator value
    (58) numericalConditionFunction -> . ID logicOperator alterFunction
    (59) numericalConditionFunction -> . ID logicOperator ID
    (60) callFunction -> . CALL LPAR ID RPAR
    (61) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (62) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (63) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (64) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (65) iterativeFunction -> . repeatFunction
    (66) iterativeFunction -> . untilFunction
    (67) iterativeFunction -> . whileFunction
    (68) breakFunction -> . BREAK
    (88) caseWhenFunction -> . CASE WHEN LPAR value RPAR THEN instructionBlock elseExpression
    (89) caseWhenFunction -> . CASE WHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (90) caseWhenFunction -> . CASE WHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (91) caseFunction -> . CASE ID whenExpression elseExpression
    (69) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (70) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (81) repeatFunction -> . REPEAT LPAR insideInstruction RPAR
    (82) untilFunction -> . UNTIL instructionBlock value
    (83) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (84) untilFunction -> . UNTIL instructionBlock ID
    (85) whileFunction -> . WHILE value instructionBlock
    (86) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (87) whileFunction -> . WHILE ID instructionBlock

    NEW             shift and go to state 12
    RPAR            reduce using rule 99 (empty -> .)
    ALTER           shift and go to state 19
    MOVERIGHT       shift and go to state 30
    MOVELEFT        shift and go to state 31
    STOP            shift and go to state 32
    HAMMER          shift and go to state 33
    ALTERB          shift and go to state 34
    ISTRUE          shift and go to state 35
    ID              shift and go to state 9
    CALL            shift and go to state 36
    VALUES          shift and go to state 37
    BREAK           shift and go to state 41
    CASE            shift and go to state 42
    PRINTVALUES     shift and go to state 43
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    REPEAT          shift and go to state 46
    UNTIL           shift and go to state 47
    WHILE           shift and go to state 48

    function                       shift and go to state 115
    insideInstruction              shift and go to state 171
    attribute                      shift and go to state 116
    empty                          shift and go to state 117
    languageFunction               shift and go to state 10
    tagadaFunction                 shift and go to state 11
    value                          shift and go to state 13
    alterFunction                  shift and go to state 14
    returnBoolFunction             shift and go to state 15
    voidFunction                   shift and go to state 16
    movementFunction               shift and go to state 17
    hammerFunction                 shift and go to state 18
    alterbFunction                 shift and go to state 20
    istrueFunction                 shift and go to state 21
    numericalConditionFunction     shift and go to state 22
    callFunction                   shift and go to state 23
    valuesFunction                 shift and go to state 24
    iterativeFunction              shift and go to state 25
    breakFunction                  shift and go to state 26
    caseWhenFunction               shift and go to state 27
    caseFunction                   shift and go to state 28
    printFunction                  shift and go to state 29
    repeatFunction                 shift and go to state 38
    untilFunction                  shift and go to state 39
    whileFunction                  shift and go to state 40

state 148

    (16) insideInstruction -> attribute SEMMICOLOM . insideInstruction
    (15) insideInstruction -> . function SEMMICOLOM insideInstruction
    (16) insideInstruction -> . attribute SEMMICOLOM insideInstruction
    (17) insideInstruction -> . empty
    (8) function -> . languageFunction
    (9) function -> . tagadaFunction
    (10) attribute -> . NEW ID COMMA LPAR datatype COMMA value RPAR
    (11) attribute -> . NEW ID COMMA LPAR datatype COMMA alterFunction RPAR
    (12) attribute -> . NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR
    (13) attribute -> . NEW ID COMMA LPAR datatype COMMA ID RPAR
    (99) empty -> .
    (18) languageFunction -> . alterFunction
    (19) languageFunction -> . returnBoolFunction
    (20) languageFunction -> . voidFunction
    (21) tagadaFunction -> . movementFunction
    (22) tagadaFunction -> . hammerFunction
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (29) returnBoolFunction -> . alterbFunction
    (30) returnBoolFunction -> . istrueFunction
    (31) returnBoolFunction -> . numericalConditionFunction
    (32) voidFunction -> . callFunction
    (33) voidFunction -> . valuesFunction
    (34) voidFunction -> . iterativeFunction
    (35) voidFunction -> . breakFunction
    (36) voidFunction -> . caseWhenFunction
    (37) voidFunction -> . caseFunction
    (38) voidFunction -> . printFunction
    (39) movementFunction -> . MOVERIGHT
    (40) movementFunction -> . MOVELEFT
    (41) movementFunction -> . STOP
    (42) hammerFunction -> . HAMMER LPAR direction RPAR
    (47) alterbFunction -> . ALTERB LPAR ID RPAR
    (48) istrueFunction -> . ISTRUE LPAR value RPAR
    (49) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (50) istrueFunction -> . ISTRUE LPAR ID RPAR
    (51) numericalConditionFunction -> . value logicOperator value
    (52) numericalConditionFunction -> . value logicOperator alterFunction
    (53) numericalConditionFunction -> . value logicOperator ID
    (54) numericalConditionFunction -> . alterFunction logicOperator value
    (55) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (56) numericalConditionFunction -> . alterFunction logicOperator ID
    (57) numericalConditionFunction -> . ID logicOperator value
    (58) numericalConditionFunction -> . ID logicOperator alterFunction
    (59) numericalConditionFunction -> . ID logicOperator ID
    (60) callFunction -> . CALL LPAR ID RPAR
    (61) valuesFunction -> . VALUES LPAR ID COMMA value RPAR
    (62) valuesFunction -> . VALUES LPAR ID COMMA alterFunction RPAR
    (63) valuesFunction -> . VALUES LPAR ID COMMA returnBoolFunction RPAR
    (64) valuesFunction -> . VALUES LPAR ID COMMA ID RPAR
    (65) iterativeFunction -> . repeatFunction
    (66) iterativeFunction -> . untilFunction
    (67) iterativeFunction -> . whileFunction
    (68) breakFunction -> . BREAK
    (88) caseWhenFunction -> . CASE WHEN LPAR value RPAR THEN instructionBlock elseExpression
    (89) caseWhenFunction -> . CASE WHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression
    (90) caseWhenFunction -> . CASE WHEN LPAR ID RPAR THEN instructionBlock elseExpression
    (91) caseFunction -> . CASE ID whenExpression elseExpression
    (69) printFunction -> . PRINTVALUES LPAR ID consolePrint RPAR
    (70) printFunction -> . PRINTVALUES LPAR TEXT consolePrint RPAR
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (81) repeatFunction -> . REPEAT LPAR insideInstruction RPAR
    (82) untilFunction -> . UNTIL instructionBlock value
    (83) untilFunction -> . UNTIL instructionBlock returnBoolFunction
    (84) untilFunction -> . UNTIL instructionBlock ID
    (85) whileFunction -> . WHILE value instructionBlock
    (86) whileFunction -> . WHILE returnBoolFunction instructionBlock
    (87) whileFunction -> . WHILE ID instructionBlock

    NEW             shift and go to state 12
    RPAR            reduce using rule 99 (empty -> .)
    ALTER           shift and go to state 19
    MOVERIGHT       shift and go to state 30
    MOVELEFT        shift and go to state 31
    STOP            shift and go to state 32
    HAMMER          shift and go to state 33
    ALTERB          shift and go to state 34
    ISTRUE          shift and go to state 35
    ID              shift and go to state 9
    CALL            shift and go to state 36
    VALUES          shift and go to state 37
    BREAK           shift and go to state 41
    CASE            shift and go to state 42
    PRINTVALUES     shift and go to state 43
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    REPEAT          shift and go to state 46
    UNTIL           shift and go to state 47
    WHILE           shift and go to state 48

    attribute                      shift and go to state 116
    insideInstruction              shift and go to state 172
    function                       shift and go to state 115
    empty                          shift and go to state 117
    languageFunction               shift and go to state 10
    tagadaFunction                 shift and go to state 11
    value                          shift and go to state 13
    alterFunction                  shift and go to state 14
    returnBoolFunction             shift and go to state 15
    voidFunction                   shift and go to state 16
    movementFunction               shift and go to state 17
    hammerFunction                 shift and go to state 18
    alterbFunction                 shift and go to state 20
    istrueFunction                 shift and go to state 21
    numericalConditionFunction     shift and go to state 22
    callFunction                   shift and go to state 23
    valuesFunction                 shift and go to state 24
    iterativeFunction              shift and go to state 25
    breakFunction                  shift and go to state 26
    caseWhenFunction               shift and go to state 27
    caseFunction                   shift and go to state 28
    printFunction                  shift and go to state 29
    repeatFunction                 shift and go to state 38
    untilFunction                  shift and go to state 39
    whileFunction                  shift and go to state 40

state 149

    (14) instructionBlock -> LPAR insideInstruction RPAR .

    ID              reduce using rule 14 (instructionBlock -> LPAR insideInstruction RPAR .)
    NUMVALUE        reduce using rule 14 (instructionBlock -> LPAR insideInstruction RPAR .)
    BOOLVALUE       reduce using rule 14 (instructionBlock -> LPAR insideInstruction RPAR .)
    ALTERB          reduce using rule 14 (instructionBlock -> LPAR insideInstruction RPAR .)
    ISTRUE          reduce using rule 14 (instructionBlock -> LPAR insideInstruction RPAR .)
    ALTER           reduce using rule 14 (instructionBlock -> LPAR insideInstruction RPAR .)
    SEMMICOLOM      reduce using rule 14 (instructionBlock -> LPAR insideInstruction RPAR .)
    WHEN            reduce using rule 14 (instructionBlock -> LPAR insideInstruction RPAR .)
    ELSE            reduce using rule 14 (instructionBlock -> LPAR insideInstruction RPAR .)


state 150

    (10) attribute -> NEW ID COMMA LPAR datatype . COMMA value RPAR
    (11) attribute -> NEW ID COMMA LPAR datatype . COMMA alterFunction RPAR
    (12) attribute -> NEW ID COMMA LPAR datatype . COMMA returnBoolFunction RPAR
    (13) attribute -> NEW ID COMMA LPAR datatype . COMMA ID RPAR

    COMMA           shift and go to state 173


state 151

    (23) datatype -> NUMDT .

    COMMA           reduce using rule 23 (datatype -> NUMDT .)


state 152

    (24) datatype -> BOOLDT .

    COMMA           reduce using rule 24 (datatype -> BOOLDT .)


state 153

    (27) alterFunction -> ALTER LPAR ID COMMA numericalOperator . COMMA value RPAR
    (28) alterFunction -> ALTER LPAR ID COMMA numericalOperator . COMMA ID RPAR

    COMMA           shift and go to state 174


state 154

    (43) numericalOperator -> ADDOP .

    COMMA           reduce using rule 43 (numericalOperator -> ADDOP .)


state 155

    (44) numericalOperator -> SUBOP .

    COMMA           reduce using rule 44 (numericalOperator -> SUBOP .)


state 156

    (45) numericalOperator -> MULOP .

    COMMA           reduce using rule 45 (numericalOperator -> MULOP .)


state 157

    (46) numericalOperator -> DIVOP .

    COMMA           reduce using rule 46 (numericalOperator -> DIVOP .)


state 158

    (64) valuesFunction -> VALUES LPAR ID COMMA ID . RPAR
    (57) numericalConditionFunction -> ID . logicOperator value
    (58) numericalConditionFunction -> ID . logicOperator alterFunction
    (59) numericalConditionFunction -> ID . logicOperator ID
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    RPAR            shift and go to state 175
    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    logicOperator                  shift and go to state 55

state 159

    (61) valuesFunction -> VALUES LPAR ID COMMA value . RPAR
    (51) numericalConditionFunction -> value . logicOperator value
    (52) numericalConditionFunction -> value . logicOperator alterFunction
    (53) numericalConditionFunction -> value . logicOperator ID
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    RPAR            shift and go to state 176
    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    logicOperator                  shift and go to state 63

state 160

    (62) valuesFunction -> VALUES LPAR ID COMMA alterFunction . RPAR
    (54) numericalConditionFunction -> alterFunction . logicOperator value
    (55) numericalConditionFunction -> alterFunction . logicOperator alterFunction
    (56) numericalConditionFunction -> alterFunction . logicOperator ID
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    RPAR            shift and go to state 177
    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    logicOperator                  shift and go to state 64

state 161

    (63) valuesFunction -> VALUES LPAR ID COMMA returnBoolFunction . RPAR

    RPAR            shift and go to state 178


state 162

    (88) caseWhenFunction -> CASE WHEN LPAR value RPAR . THEN instructionBlock elseExpression

    THEN            shift and go to state 179


state 163

    (89) caseWhenFunction -> CASE WHEN LPAR returnBoolFunction RPAR . THEN instructionBlock elseExpression

    THEN            shift and go to state 180


state 164

    (90) caseWhenFunction -> CASE WHEN LPAR ID RPAR . THEN instructionBlock elseExpression

    THEN            shift and go to state 181


state 165

    (95) elseExpression -> ELSE instructionBlock .

    SEMMICOLOM      reduce using rule 95 (elseExpression -> ELSE instructionBlock .)


state 166

    (97) whenExpression -> WHEN value THEN . instructionBlock whenExpression
    (98) whenExpression -> WHEN value THEN . instructionBlock
    (14) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 76

    instructionBlock               shift and go to state 182

state 167

    (69) printFunction -> PRINTVALUES LPAR ID consolePrint RPAR .

    SEMMICOLOM      reduce using rule 69 (printFunction -> PRINTVALUES LPAR ID consolePrint RPAR .)


state 168

    (92) consolePrint -> COMMA ID . consolePrint
    (92) consolePrint -> . COMMA ID consolePrint
    (93) consolePrint -> . COMMA TEXT consolePrint
    (94) consolePrint -> . empty
    (99) empty -> .

    COMMA           shift and go to state 143
    RPAR            reduce using rule 99 (empty -> .)

    consolePrint                   shift and go to state 183
    empty                          shift and go to state 144

state 169

    (93) consolePrint -> COMMA TEXT . consolePrint
    (92) consolePrint -> . COMMA ID consolePrint
    (93) consolePrint -> . COMMA TEXT consolePrint
    (94) consolePrint -> . empty
    (99) empty -> .

    COMMA           shift and go to state 143
    RPAR            reduce using rule 99 (empty -> .)

    consolePrint                   shift and go to state 184
    empty                          shift and go to state 144

state 170

    (70) printFunction -> PRINTVALUES LPAR TEXT consolePrint RPAR .

    SEMMICOLOM      reduce using rule 70 (printFunction -> PRINTVALUES LPAR TEXT consolePrint RPAR .)


state 171

    (15) insideInstruction -> function SEMMICOLOM insideInstruction .

    RPAR            reduce using rule 15 (insideInstruction -> function SEMMICOLOM insideInstruction .)


state 172

    (16) insideInstruction -> attribute SEMMICOLOM insideInstruction .

    RPAR            reduce using rule 16 (insideInstruction -> attribute SEMMICOLOM insideInstruction .)


state 173

    (10) attribute -> NEW ID COMMA LPAR datatype COMMA . value RPAR
    (11) attribute -> NEW ID COMMA LPAR datatype COMMA . alterFunction RPAR
    (12) attribute -> NEW ID COMMA LPAR datatype COMMA . returnBoolFunction RPAR
    (13) attribute -> NEW ID COMMA LPAR datatype COMMA . ID RPAR
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE
    (27) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA value RPAR
    (28) alterFunction -> . ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR
    (29) returnBoolFunction -> . alterbFunction
    (30) returnBoolFunction -> . istrueFunction
    (31) returnBoolFunction -> . numericalConditionFunction
    (47) alterbFunction -> . ALTERB LPAR ID RPAR
    (48) istrueFunction -> . ISTRUE LPAR value RPAR
    (49) istrueFunction -> . ISTRUE LPAR returnBoolFunction RPAR
    (50) istrueFunction -> . ISTRUE LPAR ID RPAR
    (51) numericalConditionFunction -> . value logicOperator value
    (52) numericalConditionFunction -> . value logicOperator alterFunction
    (53) numericalConditionFunction -> . value logicOperator ID
    (54) numericalConditionFunction -> . alterFunction logicOperator value
    (55) numericalConditionFunction -> . alterFunction logicOperator alterFunction
    (56) numericalConditionFunction -> . alterFunction logicOperator ID
    (57) numericalConditionFunction -> . ID logicOperator value
    (58) numericalConditionFunction -> . ID logicOperator alterFunction
    (59) numericalConditionFunction -> . ID logicOperator ID

    ID              shift and go to state 185
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45
    ALTER           shift and go to state 19
    ALTERB          shift and go to state 34
    ISTRUE          shift and go to state 35

    value                          shift and go to state 186
    alterFunction                  shift and go to state 187
    returnBoolFunction             shift and go to state 188
    alterbFunction                 shift and go to state 20
    istrueFunction                 shift and go to state 21
    numericalConditionFunction     shift and go to state 22

state 174

    (27) alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA . value RPAR
    (28) alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA . ID RPAR
    (25) value -> . NUMVALUE
    (26) value -> . BOOLVALUE

    ID              shift and go to state 189
    NUMVALUE        shift and go to state 44
    BOOLVALUE       shift and go to state 45

    value                          shift and go to state 190

state 175

    (64) valuesFunction -> VALUES LPAR ID COMMA ID RPAR .

    SEMMICOLOM      reduce using rule 64 (valuesFunction -> VALUES LPAR ID COMMA ID RPAR .)


state 176

    (61) valuesFunction -> VALUES LPAR ID COMMA value RPAR .

    SEMMICOLOM      reduce using rule 61 (valuesFunction -> VALUES LPAR ID COMMA value RPAR .)


state 177

    (62) valuesFunction -> VALUES LPAR ID COMMA alterFunction RPAR .

    SEMMICOLOM      reduce using rule 62 (valuesFunction -> VALUES LPAR ID COMMA alterFunction RPAR .)


state 178

    (63) valuesFunction -> VALUES LPAR ID COMMA returnBoolFunction RPAR .

    SEMMICOLOM      reduce using rule 63 (valuesFunction -> VALUES LPAR ID COMMA returnBoolFunction RPAR .)


state 179

    (88) caseWhenFunction -> CASE WHEN LPAR value RPAR THEN . instructionBlock elseExpression
    (14) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 76

    instructionBlock               shift and go to state 191

state 180

    (89) caseWhenFunction -> CASE WHEN LPAR returnBoolFunction RPAR THEN . instructionBlock elseExpression
    (14) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 76

    instructionBlock               shift and go to state 192

state 181

    (90) caseWhenFunction -> CASE WHEN LPAR ID RPAR THEN . instructionBlock elseExpression
    (14) instructionBlock -> . LPAR insideInstruction RPAR

    LPAR            shift and go to state 76

    instructionBlock               shift and go to state 193

state 182

    (97) whenExpression -> WHEN value THEN instructionBlock . whenExpression
    (98) whenExpression -> WHEN value THEN instructionBlock .
    (97) whenExpression -> . WHEN value THEN instructionBlock whenExpression
    (98) whenExpression -> . WHEN value THEN instructionBlock

    ELSE            reduce using rule 98 (whenExpression -> WHEN value THEN instructionBlock .)
    SEMMICOLOM      reduce using rule 98 (whenExpression -> WHEN value THEN instructionBlock .)
    WHEN            shift and go to state 111

    whenExpression                 shift and go to state 194

state 183

    (92) consolePrint -> COMMA ID consolePrint .

    RPAR            reduce using rule 92 (consolePrint -> COMMA ID consolePrint .)


state 184

    (93) consolePrint -> COMMA TEXT consolePrint .

    RPAR            reduce using rule 93 (consolePrint -> COMMA TEXT consolePrint .)


state 185

    (13) attribute -> NEW ID COMMA LPAR datatype COMMA ID . RPAR
    (57) numericalConditionFunction -> ID . logicOperator value
    (58) numericalConditionFunction -> ID . logicOperator alterFunction
    (59) numericalConditionFunction -> ID . logicOperator ID
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    RPAR            shift and go to state 195
    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    logicOperator                  shift and go to state 55

state 186

    (10) attribute -> NEW ID COMMA LPAR datatype COMMA value . RPAR
    (51) numericalConditionFunction -> value . logicOperator value
    (52) numericalConditionFunction -> value . logicOperator alterFunction
    (53) numericalConditionFunction -> value . logicOperator ID
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    RPAR            shift and go to state 196
    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    logicOperator                  shift and go to state 63

state 187

    (11) attribute -> NEW ID COMMA LPAR datatype COMMA alterFunction . RPAR
    (54) numericalConditionFunction -> alterFunction . logicOperator value
    (55) numericalConditionFunction -> alterFunction . logicOperator alterFunction
    (56) numericalConditionFunction -> alterFunction . logicOperator ID
    (75) logicOperator -> . EEOP
    (76) logicOperator -> . NEOP
    (77) logicOperator -> . GETOP
    (78) logicOperator -> . LETOP
    (79) logicOperator -> . GTOP
    (80) logicOperator -> . LTOP

    RPAR            shift and go to state 197
    EEOP            shift and go to state 56
    NEOP            shift and go to state 57
    GETOP           shift and go to state 58
    LETOP           shift and go to state 59
    GTOP            shift and go to state 60
    LTOP            shift and go to state 61

    logicOperator                  shift and go to state 64

state 188

    (12) attribute -> NEW ID COMMA LPAR datatype COMMA returnBoolFunction . RPAR

    RPAR            shift and go to state 198


state 189

    (28) alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID . RPAR

    RPAR            shift and go to state 199


state 190

    (27) alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA value . RPAR

    RPAR            shift and go to state 200


state 191

    (88) caseWhenFunction -> CASE WHEN LPAR value RPAR THEN instructionBlock . elseExpression
    (95) elseExpression -> . ELSE instructionBlock
    (96) elseExpression -> . empty
    (99) empty -> .

    ELSE            shift and go to state 139
    SEMMICOLOM      reduce using rule 99 (empty -> .)

    elseExpression                 shift and go to state 201
    empty                          shift and go to state 140

state 192

    (89) caseWhenFunction -> CASE WHEN LPAR returnBoolFunction RPAR THEN instructionBlock . elseExpression
    (95) elseExpression -> . ELSE instructionBlock
    (96) elseExpression -> . empty
    (99) empty -> .

    ELSE            shift and go to state 139
    SEMMICOLOM      reduce using rule 99 (empty -> .)

    elseExpression                 shift and go to state 202
    empty                          shift and go to state 140

state 193

    (90) caseWhenFunction -> CASE WHEN LPAR ID RPAR THEN instructionBlock . elseExpression
    (95) elseExpression -> . ELSE instructionBlock
    (96) elseExpression -> . empty
    (99) empty -> .

    ELSE            shift and go to state 139
    SEMMICOLOM      reduce using rule 99 (empty -> .)

    elseExpression                 shift and go to state 203
    empty                          shift and go to state 140

state 194

    (97) whenExpression -> WHEN value THEN instructionBlock whenExpression .

    ELSE            reduce using rule 97 (whenExpression -> WHEN value THEN instructionBlock whenExpression .)
    SEMMICOLOM      reduce using rule 97 (whenExpression -> WHEN value THEN instructionBlock whenExpression .)


state 195

    (13) attribute -> NEW ID COMMA LPAR datatype COMMA ID RPAR .

    SEMMICOLOM      reduce using rule 13 (attribute -> NEW ID COMMA LPAR datatype COMMA ID RPAR .)


state 196

    (10) attribute -> NEW ID COMMA LPAR datatype COMMA value RPAR .

    SEMMICOLOM      reduce using rule 10 (attribute -> NEW ID COMMA LPAR datatype COMMA value RPAR .)


state 197

    (11) attribute -> NEW ID COMMA LPAR datatype COMMA alterFunction RPAR .

    SEMMICOLOM      reduce using rule 11 (attribute -> NEW ID COMMA LPAR datatype COMMA alterFunction RPAR .)


state 198

    (12) attribute -> NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR .

    SEMMICOLOM      reduce using rule 12 (attribute -> NEW ID COMMA LPAR datatype COMMA returnBoolFunction RPAR .)


state 199

    (28) alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .

    EEOP            reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)
    NEOP            reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)
    GETOP           reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)
    LETOP           reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)
    GTOP            reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)
    LTOP            reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)
    SEMMICOLOM      reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)
    LPAR            reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)
    RPAR            reduce using rule 28 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA ID RPAR .)


state 200

    (27) alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA value RPAR .

    EEOP            reduce using rule 27 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA value RPAR .)
    NEOP            reduce using rule 27 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA value RPAR .)
    GETOP           reduce using rule 27 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA value RPAR .)
    LETOP           reduce using rule 27 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA value RPAR .)
    GTOP            reduce using rule 27 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA value RPAR .)
    LTOP            reduce using rule 27 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA value RPAR .)
    SEMMICOLOM      reduce using rule 27 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA value RPAR .)
    LPAR            reduce using rule 27 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA value RPAR .)
    RPAR            reduce using rule 27 (alterFunction -> ALTER LPAR ID COMMA numericalOperator COMMA value RPAR .)


state 201

    (88) caseWhenFunction -> CASE WHEN LPAR value RPAR THEN instructionBlock elseExpression .

    SEMMICOLOM      reduce using rule 88 (caseWhenFunction -> CASE WHEN LPAR value RPAR THEN instructionBlock elseExpression .)


state 202

    (89) caseWhenFunction -> CASE WHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression .

    SEMMICOLOM      reduce using rule 89 (caseWhenFunction -> CASE WHEN LPAR returnBoolFunction RPAR THEN instructionBlock elseExpression .)


state 203

    (90) caseWhenFunction -> CASE WHEN LPAR ID RPAR THEN instructionBlock elseExpression .

    SEMMICOLOM      reduce using rule 90 (caseWhenFunction -> CASE WHEN LPAR ID RPAR THEN instructionBlock elseExpression .)

